<?xml version="1.0" encoding="UTF-8"?>
<etl name="etl" type="0">
    <nodes>
        <node name="Basic" type="0">
            <nodes>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;   &lt;name>New Etl Scenario&lt;/name>&#xa;   &lt;script>new&lt;/script>&#xa;&lt;/scenario>" name="New Scenario" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Move data&lt;/name>&#xa;     &lt;description>Moves data from one database to another. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Move data" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Stream data&lt;/name>&#xa;     &lt;description>Streams data from one database to another. Creates tables if needed.&lt;/description>&#xa;     &lt;script>stream_data&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load stream=&quot;true&quot; />&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load stream=&quot;true&quot; />&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load stream=&quot;true&quot; />&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Stream data" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Create indexes&lt;/name>&#xa;     &lt;description>Creates tables if needed. Creates indexes when createing a table and adds suffix to the index name. Copies data&lt;/description>&#xa;     &lt;script>create_indexes&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>EMPLOYEE&lt;/tablename> &lt;!-- required for index creation -->&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;tablename>EMP_RESUME&lt;/tablename> &lt;!-- required for index creation -->&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;tablename>EMP_PHOTO&lt;/tablename> &lt;!-- required for index creation -->&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata indexes=&quot;true&quot; suffix=&quot;_t&quot;/> &lt;!-- suffix is not a required attribute -->&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata indexes=&quot;true&quot; suffix=&quot;_t&quot;/> &lt;!-- suffix is not a required attribute -->&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata indexes=&quot;true&quot; suffix=&quot;_t&quot;/> &lt;!-- suffix is not a required attribute -->&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Creates tables if needed. Creates indexes when createing a table and adds suffix to the index name. Copies data" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Automatic commit&lt;/name>&#xa;     &lt;description>Automatically commit transaction on each executed SQL block&lt;/description>&#xa;     &lt;script>auto_commit&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;onexecute action=&quot;commit&quot;/>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Automatically commit transaction on each executed SQL block" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Map fields&lt;/name>&#xa;     &lt;description>Map source fields to destination fields. Exclude some fields&lt;/description>&#xa;     &lt;script>map_fields&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_source&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_map_fields&lt;/name>&#xa;               &lt;source>employee_source&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                      &lt;EMP_EMPNO field=&quot;EMPNO&quot; />&#xa;                      &lt;EMP_FIRSTNME field=&quot;FIRSTNME&quot; />&#xa;                      &lt;EMP_MIDINIT field=&quot;MIDINIT&quot; />&#xa;                      &lt;EMP_LASTNAME field=&quot;LASTNAME&quot; />&#xa;                      &lt;EMP_WORKDEPT field=&quot;WORKDEPT&quot; />&#xa;                      &lt;EMP_PHONENO field=&quot;PHONENO&quot; />&#xa;                      &lt;EMP_HIREDATE field=&quot;HIREDATE&quot; />&#xa;                      &lt;EMP_JOB field=&quot;JOB&quot; />&#xa;                      &lt;EMP_EDLEVEL field=&quot;EDLEVEL&quot; />&#xa;                      &lt;EMP_SEX field=&quot;SEX&quot; include=&quot;false&quot; />&#xa;                      &lt;EMP_BIRTHDATE field=&quot;BIRTHDATE&quot; />&#xa;                      &lt;EMP_SALARY field=&quot;SALARY&quot; />&#xa;                      &lt;EMP_BONUS field=&quot;BONUS&quot; include=&quot;false&quot; />&#xa;                      &lt;EMP_COMM field=&quot;COMM&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Map source fields to destination fields. Exclude some fields" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Map Source to Destination&lt;/name>&#xa;     &lt;description>Map Source to Destination if names are different&lt;/description>&#xa;     &lt;script>move_data&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_source&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;source>employee_source&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Map Source to Destination if names are different" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Move data&lt;/name>&#xa;     &lt;description>Destination Table name different from Destination name&lt;/description>&#xa;     &lt;script>move_data&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>new_employee&lt;/tablename>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Destination Table name different from Destination name" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Move data using specific ETL driver&lt;/name>&#xa;     &lt;description>Moves data from one database to another using specific ETL driver. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data_oracle&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.oracle.OracleDriver&lt;/driver>&#xa;     &lt;!-- &lt;driver>auto&lt;/driver> will try to select the best driver/drivers best on the connection info -->&#xa;     &lt;!-- no driver at all - the generic jdbc driver will be used -->&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Use specific ETL driver" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>generic_driver&lt;/name>&#xa;     &lt;description>Using generic jdbc ETL driver together with specific database ETL driver. This ETL code wiil not generate stored procedures&lt;/description>&#xa;     &lt;script>generic_driver&lt;/script>&#xa;     &lt;driver name=&quot;com.toolsverse.etl.driver.GenericJdbcDriver&quot; parent=&quot;com.toolsverse.etl.driver.mysql.MySqlDriver&quot;/>&#xa;     &lt;sources>&#xa;          &lt;source parallel=&quot;yes&quot;>&#xa;               &lt;name>EMPLOYEE&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from EMPLOYEE&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source parallel=&quot;yes&quot;>&#xa;               &lt;name>EMP_PHOTO&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from EMP_PHOTO&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source parallel=&quot;yes&quot;>&#xa;               &lt;name>EMP_RESUME&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from EMP_RESUME&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination scope=&quot;single&quot;>&#xa;               &lt;name>EMPLOYEE_delete&lt;/name>&#xa;               &lt;load>&#xa;                    &lt;sql>delete from EMPLOYEE;&lt;/sql>&#xa;                    &lt;onexception action=&quot;ignore&quot;/>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>EMPLOYEE&lt;/name>&#xa;               &lt;tablename>EMPLOYEE&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load stream=&quot;yes&quot;>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination scope=&quot;single&quot;>&#xa;               &lt;name>EMP_PHOTO_delete&lt;/name>&#xa;               &lt;load>&#xa;                    &lt;sql>delete from EMP_PHOTO;&lt;/sql>&#xa;                    &lt;onexception action=&quot;ignore&quot;/>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>EMP_PHOTO&lt;/name>&#xa;               &lt;tablename>EMP_PHOTO&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load stream=&quot;yes&quot;>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination scope=&quot;single&quot;>&#xa;               &lt;name>EMP_RESUME_delete&lt;/name>&#xa;               &lt;load>&#xa;                    &lt;sql>delete from EMP_RESUME;&lt;/sql>&#xa;                    &lt;onexception action=&quot;ignore&quot;/>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>EMP_RESUME&lt;/name>&#xa;               &lt;tablename>EMP_RESUME&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load stream=&quot;yes&quot;>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;"
                    name="Using generic jdbc ETL driver together with specific database ETL driver. This ETL code wiil not generate stored procedures" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Delete records and Stream data&lt;/name>&#xa;     &lt;description>Deletes records from destination tables first then streams data. Creates tables if needed.&lt;/description>&#xa;     &lt;script>stream_data&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;           &lt;destination scope=&quot;single&quot;> &#xa;             &lt;name>delete_employee&lt;/name>&#xa;             &lt;load>&#xa;                &lt;sql>&#xa;                   delete from employee;   &#xa;               &lt;/sql> &#xa;               &lt;onexception action=&quot;ignore&quot;/>    &#xa;             &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination scope=&quot;single&quot;> &#xa;             &lt;name>delete_resume&lt;/name>&#xa;             &lt;load>&#xa;                &lt;sql>&#xa;                   delete from emp_resume; &#xa;               &lt;/sql> &#xa;               &lt;onexception action=&quot;ignore&quot;/>    &#xa;             &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination scope=&quot;single&quot;> &#xa;             &lt;name>delete_photo&lt;/name>&#xa;             &lt;load>&#xa;                &lt;sql>&#xa;                   delete from emp_photo;    &#xa;               &lt;/sql> &#xa;               &lt;onexception action=&quot;ignore&quot;/>    &#xa;             &lt;/load>&#xa;          &lt;/destination>          &#xa;&#xa;     &#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load stream=&quot;true&quot; />&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load stream=&quot;true&quot; />&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load stream=&quot;true&quot; />&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;"
                    name="Destination scope" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Scenario Variables&lt;/name>&#xa;     &lt;description>Extracts data using conditions, moves data from source to destination.&lt;/description>&#xa;     &lt;script>scenario_variables&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;variables>&#xa;         &lt;JOB label=&quot;Job Title&quot; value=&quot;MANAGER&quot; >&#xa;             &lt;item type=&quot;select&quot; default=&quot;MANAGER&quot;>&#xa;                &lt;select> &#xa;                   &lt;value key=&quot;PRES&quot; description=&quot;Pres&quot; />&#xa;                   &lt;value key=&quot;MANAGER&quot; description=&quot;Manager&quot; />&#xa;                   &lt;value key=&quot;SALESREP&quot; description=&quot;Sales represenative&quot; />&#xa;                   &lt;value key=&quot;CLERK&quot; description=&quot;Clerk&quot; />&#xa;                   &lt;value key=&quot;ANALYST&quot; description=&quot;Analyst&quot; />&#xa;                   &lt;value key=&quot;DESIGNER&quot; description=&quot;Designer&quot; />&#xa;                   &lt;value key=&quot;FIELDREP&quot; description=&quot;Field represenative&quot; />&#xa;                &lt;/select>&#xa;             &lt;/item>&#xa;         &lt;/JOB>&#xa;         &lt;SEX label=&quot;Sex&quot; >&#xa;             &lt;item type=&quot;select&quot;>&#xa;                &lt;select> &#xa;                   &lt;value key=&quot;M&quot; description=&quot;Male&quot; />&#xa;                   &lt;value key=&quot;F&quot; description=&quot;Female&quot; />&#xa;                &lt;/select>&#xa;             &lt;/item>&#xa;         &lt;/SEX>    &#xa;         &lt;HIREDATE label=&quot;Hire Date&quot;>&#xa;             &lt;item type=&quot;calendar&quot; format=&quot;MM/dd/yyyy&quot;/>&#xa;         &lt;/HIREDATE>&#xa;         &lt;LASTNAME label=&quot;Last Name&quot; />&#xa;         &lt;SALARY label=&quot;Salary&quot; >&#xa;            &lt;item type=&quot;number&quot; default=&quot;50000&quot; allownull=&quot;false&quot; minvalue=&quot;50000&quot; format=&quot;#&quot; />&#xa;         &lt;/SALARY>&#xa;     &lt;/variables>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee where ((job={JOB} and ({SEX} is null or sex={SEX})) or&#xa;                         ({HIREDATE} is not null and HIREDATE > {HIREDATE}) or ({LASTNAME} is not null and LASTNAME={LASTNAME}))&#xa;                         and (SALARY >= {SALARY})&#xa;                    &lt;/sql>&#xa;                    &lt;using>JOB,SEX,SEX,HIREDATE,HIREDATE,LASTNAME,LASTNAME,SALARY&lt;/using>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Scenario Variables" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Variable substitution&lt;/name>&#xa;     &lt;description>Demostrates variable substitution&lt;/description>&#xa;     &lt;script>variables_subst&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;onpopulate action=&quot;save&quot;/>&#xa;     &lt;variables>&#xa;         &lt;JOB label=&quot;Job Title&quot; value=&quot;MANAGER&quot; >&#xa;             &lt;item type=&quot;select&quot; default=&quot;MANAGER&quot;>&#xa;                &lt;select> &#xa;                   &lt;value key=&quot;PRES&quot; description=&quot;Pres&quot; />&#xa;                   &lt;value key=&quot;MANAGER&quot; description=&quot;Manager&quot; />&#xa;                   &lt;value key=&quot;SALESREP&quot; description=&quot;Sales represenative&quot; />&#xa;                   &lt;value key=&quot;CLERK&quot; description=&quot;Clerk&quot; />&#xa;                   &lt;value key=&quot;ANALYST&quot; description=&quot;Analyst&quot; />&#xa;                   &lt;value key=&quot;DESIGNER&quot; description=&quot;Designer&quot; />&#xa;                   &lt;value key=&quot;FIELDREP&quot; description=&quot;Field represenative&quot; />&#xa;                &lt;/select>&#xa;             &lt;/item>&#xa;         &lt;/JOB>&#xa;         &lt;CONDITION value=&quot;job = '{JOB}' and sex = 'M'&quot; />&#xa;     &lt;/variables>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee where {CONDITION}&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_vars&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Variable substitution" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Extract data&lt;/name>&#xa;     &lt;description>Extracts data from database tables. Creates xml files.&lt;/description>&#xa;     &lt;script>extract_data&lt;/script>&#xa;     &lt;allow>EXTRACT&lt;/allow> &lt;!-- Possible actions: LOAD, EXTRACT, EXTRACT_LOAD, use | as a seprator for multiple actions -->&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;&lt;/scenario>" name="Allowed Scenario Actions" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario requiresource=&quot;true&quot; requiredest=&quot;true&quot; >&#xa;   &lt;name>Required connection&lt;/name>&#xa;   &lt;description>Use attributes to force required connections&lt;/description>&#xa;   &lt;script>con_require&lt;/script>&#xa;&lt;/scenario>" name="Use attributes to force required connections" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario notemp=&quot;true&quot;>&#xa;     &lt;name>Move data&lt;/name>&#xa;     &lt;description>Disable creation of the temporary tables in the destination database.&lt;/description>&#xa;     &lt;script>move_data_not_temp&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Disable creation of the temporary tables in the destination database" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;!-- Merge in this example does not work with generic jdbc etl driver -->&#xa;&lt;scenario>&#xa;     &lt;name>Merge data&lt;/name>&#xa;     &lt;description>Merges data. Creates table if needed.&lt;/description>&#xa;     &lt;script>merge_data&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_merge&lt;/name>&#xa;               &lt;tablename>employee_merge&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;!-- other possible actions are insert, update, delete -->&#xa;               &lt;!-- insert is default and not require key attribute -->&#xa;               &lt;load action=&quot;merge&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;!-- This is optional, demonstrates using of variables -->                  &#xa;                   &lt;variables>&#xa;                       &lt;JOB code=&quot;var value;value = '\'abc\'';&quot; lang=&quot;JavaScript&quot; />&#xa;                       &lt;SALARY code=&quot;var value;value = row + 1;&quot; lang=&quot;JavaScript&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Merge" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;   &lt;name>PostgresSQL Merge&lt;/name>&#xa;   &lt;script>postgres_merge&lt;/script>&#xa;   &lt;description>Merges data. Creates table if needed. Use this technique with generic JDBC etl driver or when driver is not specified.&lt;/description>&#xa;   &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>config_property_test&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_property&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;       &lt;!--  The config_property table in the destination must have a primary key or unique index config_property_num -->&#xa;       &lt;destination>&#xa;          &lt;name>config_property&lt;/name>&#xa;          &lt;metadata>true>&lt;/metadata>&#xa;          &lt;!-- If PostgeSQL will generate exception &quot;duplicate key value violates unique constraint&quot; on insert the etl framework will try to execute update instead &#xa;          Other databases will have a different error pattern. &quot;savepoint&quot; attribute is specific for PostgreSQL -->&#xa;          &lt;load>&#xa;              &lt;onexception action=&quot;merge&quot; mask=&quot;duplicate key value violates unique constraint&quot; key=&quot;config_property_num&quot; savepoint=&quot;true&quot; />&#xa;          &lt;/load>&#xa;       &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Merge using generic jdbc ETL driver (destination = PostgreSQL)" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Update data&lt;/name>&#xa;     &lt;description>Updates data.&lt;/description>&#xa;     &lt;script>update_data&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;!-- other possible actions are insert, merge, delete -->&#xa;               &lt;!-- insert is default and not require key attribute -->&#xa;               &lt;load action=&quot;update&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;!-- This is optional, demonstrates using of variables -->                  &#xa;                   &lt;variables>&#xa;                       &lt;JOB code=&quot;var value;value = '\'abc\'';&quot; lang=&quot;JavaScript&quot; />&#xa;                       &lt;SALARY code=&quot;var value;value = row + 1;&quot; lang=&quot;JavaScript&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Update" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Delete data&lt;/name>&#xa;     &lt;description>Deletes data.&lt;/description>&#xa;     &lt;script>delete_data&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;!-- other possible actions are insert, merge, update -->&#xa;               &lt;!-- insert is default and not require key attribute -->&#xa;               &lt;load action=&quot;delete&quot; key=&quot;EMPNO&quot; /> &#xa;          &lt;/destination>   &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Delete" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Inline SQL&lt;/name>&#xa;     &lt;description>This scenario demonstrates using of inline sql&lt;/description>&#xa;     &lt;script>inline_sql&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_inline&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;tablename>employee_inline&lt;/tablename>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>delete&lt;/name>&#xa;               &lt;load>&#xa;                   &lt;sql>&#xa;                       delete from employee_inline &#xa;                       where salary >= 90000;&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>update&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;EMPNO />&#xa;                   &lt;/variables>&#xa;                   &lt;!-- can be any destination connection specific sql, including anonymous sql block (for example code in PL/SQL) -->&#xa;                   &lt;sql>&#xa;                       update employee_inline &#xa;                       set salary = 70000&#xa;                       where EMPNO = {EMPNO};&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Inline SQL" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Conitional Move&lt;/name>&#xa;     &lt;description>Conditionally Moves data from one database to another. Creates tables if needed.&lt;/description>&#xa;     &lt;script>cond_move_data&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;variables>&#xa;         &lt;MOVE_RESUME label=&quot;Move Resume&quot; value=&quot;false&quot; >&#xa;             &lt;item type=&quot;boolean&quot; default=&quot;false&quot; />     &#xa;         &lt;/MOVE_RESUME>    &#xa;         &lt;MOVE_PHOTO label=&quot;Move Photo&quot; value=&quot;false&quot; >&#xa;             &lt;item type=&quot;boolean&quot; default=&quot;false&quot; />     &#xa;         &lt;/MOVE_PHOTO>    &#xa;     &lt;/variables>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source conditionlang=&quot;JavaScript&quot; condition=&quot;var value; value = variables.get('MOVE_RESUME').getValue().equals('true');&quot;>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source conditionlang=&quot;JavaScript&quot; condition=&quot;var value; value = variables.get('MOVE_PHOTO').getValue().equals('true');&quot;>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination conditionlang=&quot;JavaScript&quot; condition=&quot;var value; value = variables.get('MOVE_RESUME').getValue().equals('true');&quot;>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination conditionlang=&quot;JavaScript&quot; condition=&quot;var value; value = variables.get('MOVE_PHOTO').getValue().equals('true');&quot;>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Source and Destination Conditions (JavaScript)" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Conitional Move (sql)&lt;/name>&#xa;     &lt;description>Moves data from one database to another if destination table exists.&lt;/description>&#xa;     &lt;script>cond_move_data_sql&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;!-- please note that select count(*) is a bad technique, used here just as an example -->&#xa;          &lt;source condition=&quot;select count(*) from employee&quot; condition_connection=&quot;dest&quot;>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination condition=&quot;select count(*) from employee&quot; condition_connection=&quot;dest&quot;>&#xa;               &lt;name>employee&lt;/name>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Source and Destination Conditions (SQL)" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Destination exception&lt;/name>&#xa;     &lt;description>Moves data from one database to another. Deletes data from the tables first. Ignores exception if table doesn't exist.&lt;/description>&#xa;     &lt;script>move_data_exception&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination> &#xa;             &lt;name>delete_employee&lt;/name>&#xa;             &lt;load>&#xa;                &lt;sql>&#xa;                   delete from employee;   &#xa;               &lt;/sql> &#xa;               &lt;onexception action=&quot;ignore&quot;/>    &#xa;             &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination> &#xa;             &lt;name>delete_resume&lt;/name>&#xa;             &lt;load>&#xa;                &lt;sql>&#xa;                   delete from emp_resume; &#xa;               &lt;/sql> &#xa;               &lt;onexception action=&quot;ignore&quot;/>    &#xa;             &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination> &#xa;             &lt;name>delete_photo&lt;/name>&#xa;             &lt;load>&#xa;                &lt;sql>&#xa;                   delete from emp_photo;    &#xa;               &lt;/sql> &#xa;               &lt;onexception action=&quot;ignore&quot;/>    &#xa;             &lt;/load>&#xa;          &lt;/destination>&#xa;     &#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Destination Exceptions" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>ifthenelse&lt;/name>&#xa;     &lt;description>Demonstrates if/ten/else for destination&lt;/description>&#xa;     &lt;script>ifthenelse&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;EMPNO />&#xa;                       &lt;FIRSTNME />&#xa;                       &lt;MIDINIT />&#xa;                       &lt;LASTNAME />&#xa;                       &lt;WORKDEPT />&#xa;                       &lt;PHONENO />&#xa;                       &lt;HIREDATE />&#xa;                       &lt;JOB />&#xa;                       &lt;EDLEVEL />&#xa;                       &lt;SEX />&#xa;                       &lt;BIRTHDATE />&#xa;                       &lt;SALARY />&#xa;                       &lt;BONUS />&#xa;                       &lt;COMM />&#xa;                   &lt;/variables>&#xa;                   &lt;condition>{JOB} = 'MANAGER'&lt;/condition>&#xa;                   &lt;then>{JOB}:= 'TEST';&lt;/then> &lt;!-- This example uses PostgreSQL syntax for variable assigment var:= value -->&#xa;                   &lt;else>&#xa;                       insert into employee (EMPNO,FIRSTNME,MIDINIT,LASTNAME,WORKDEPT,PHONENO,HIREDATE,JOB,EDLEVEL,SEX,BIRTHDATE,SALARY,BONUS,COMM)&#xa;                       values ({EMPNO},{FIRSTNME},{MIDINIT},{LASTNAME},{WORKDEPT},{PHONENO},{HIREDATE},{JOB},{EDLEVEL},{SEX},{BIRTHDATE},{SALARY},{BONUS},{COMM});&#xa;                   &lt;/else>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>not_managers&lt;/name>&#xa;               &lt;tablename>not_managers&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;JOB />&#xa;                   &lt;/variables>&#xa;                   &lt;condition>{JOB} &amp;lt;&amp;gt; 'MANAGER'&lt;/condition>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="If/Then/Else for Destination" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Debug&lt;/name>&#xa;     &lt;description>Debug&lt;/description>&#xa;     &lt;script>on_actions&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;onpersist action=&quot;save&quot; /> &lt;!-- If onpersist set to save (default = skip) etl farmework creates xml file in the local DATA folder for each extracted source -->&#xa;     &lt;onsave action=&quot;save&quot;/> &lt;!-- If onsave set to save (default = skip) etl farmework creates sql file in the local SCRIPTS folder -->&#xa;     &lt;onpopulate action=&quot;save&quot;/> &lt;!-- If onsave set to save (default = skip) etl farmework creates sql file for each source the local SCRIPTS folder -->&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>   &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Debuging" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Move data from different connections&lt;/name>&#xa;     &lt;description>Moves data from multiple databases to the single destination database. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data_multi_source&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;connection>First source connection&lt;/connection>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;connection>Second source connection&lt;/connection> &#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;connection>Second source connection&lt;/connection>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Multiple source connections" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Move data to different destination connections&lt;/name>&#xa;     &lt;description>Moves data to the multiple destination connections. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data_multi_dest&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_first&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;tablename>employee&lt;/tablename>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;connection>First destination connection&lt;/connection>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>employee_second&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;tablename>employee&lt;/tablename>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;connection>Second destination connection&lt;/connection>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Multiple destination connections" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario parallel=&quot;true&quot;>&#xa;     &lt;name>Move data to different destination connections in parallel threads&lt;/name>&#xa;     &lt;description>Moves data to the multiple destination connections in parallel threads. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data_multi_dest_parallel&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_first&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;tablename>employee&lt;/tablename>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;connection>First destination connection&lt;/connection>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>employee_second&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;tablename>employee&lt;/tablename>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;connection>Second destination connection&lt;/connection>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Multiple destination connections,  each in parallel thread." type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Extract and load data in parallel threads&lt;/name>&#xa;     &lt;description>Extracts and loads data in parallel threads. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source parallel=&quot;true&quot;>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source parallel=&quot;true&quot;>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source parallel=&quot;true&quot;>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination parallel=&quot;true&quot;>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination parallel=&quot;true&quot;>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination parallel=&quot;true&quot;>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Parallel extract and load" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Extract and load data in parallel threads with synchronization.&lt;/name>&#xa;     &lt;description>Extracts and loads data in parallel threads with synchronization. Creates tables if needed.&lt;/description>&#xa;     &lt;script>extract_load_parallel_with_synch&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source parallel=&quot;true&quot;>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source parallel=&quot;true&quot;>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;!-- wait here until employee and emp_resume are extracted --> &#xa;          &lt;source empty=&quot;true&quot;>&#xa;               &lt;name>wait&lt;/name>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source parallel=&quot;true&quot;>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination parallel=&quot;true&quot;>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination parallel=&quot;true&quot;>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;!-- wait here until employee and emp_resume are loaded -->&#xa;          &lt;destination type=&quot;wait&quot;>&#xa;              &lt;name>wait&lt;/name>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination parallel=&quot;true&quot;>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Parallel extract and load with synchronization" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;   &lt;name>Inner Scenarios&lt;/name>&#xa;   &lt;description>Executes inner scenarios&lt;/description>&#xa;   &lt;script>inner_scenarios&lt;/script>&#xa;&#xa;   &lt;execute>&#xa;       &lt;scenario name=&quot;first scenario&quot; />&#xa;       &lt;scenario name=&quot;second scenario&quot; />&#xa;   &lt;/execute>&#xa;&lt;/scenario>" name="Inner scenarios" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;   &lt;name>Inner Scenarios with individual actions&lt;/name>&#xa;   &lt;description>Executes inner scenarios with individual actions&lt;/description>&#xa;   &lt;script>inner_scenarios_act&lt;/script>&#xa;&#xa;   &lt;execute>&#xa;       &lt;scenario name=&quot;first scenario&quot; action=&quot;EXTRACT&quot; />&#xa;       &lt;scenario name=&quot;second scenario&quot; action=&quot;LOAD&quot; />&#xa;   &lt;/execute>&#xa;&lt;/scenario>" name="Inner Scenarios with individual actions" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Inner + Main Scenarios&lt;/name>&#xa;     &lt;description>Executes inner scenarios firts and then main scenario&lt;/description>&#xa;     &lt;script>inner_scenarios_main&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;execute>&#xa;          &lt;scenario action=&quot;EXTRACT&quot; name=&quot;first scenario&quot;/>&#xa;          &lt;scenario action=&quot;LOAD&quot; name=&quot;second scenario&quot;/>&#xa;     &lt;/execute>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Inner + Main Scenarios" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;   &lt;name>Parallel Inner Scenarios&lt;/name>&#xa;   &lt;description>Executes inner scenarios in parallel threads&lt;/description>&#xa;   &lt;script>parallel_inner_scenarios&lt;/script>&#xa;&#xa;   &lt;execute>&#xa;       &lt;scenario name=&quot;first scenario&quot; parallel=&quot;true&quot; />&#xa;       &lt;scenario name=&quot;second scenario&quot; parallel=&quot;true&quot; />&#xa;   &lt;/execute>&#xa;&lt;/scenario>" name="Parallel Inner scenarios" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;   &lt;name>Conditional Inner Scenarios (JavaScript)&lt;/name>&#xa;   &lt;description>Conditionaly Executes inner scenarios (JavaScript)&lt;/description>&#xa;   &lt;script>cond_inner_scenarios&lt;/script>&#xa;   &lt;variables>&#xa;         &lt;FIRST label=&quot;Execute First Scenario&quot; value=&quot;true&quot; >&#xa;             &lt;item type=&quot;boolean&quot; default=&quot;true&quot; />     &#xa;         &lt;/FIRST>    &#xa;         &lt;SECOND label=&quot;Execute Second Scenario&quot; value=&quot;false&quot; >&#xa;             &lt;item type=&quot;boolean&quot; default=&quot;false&quot; />     &#xa;         &lt;/SECOND>             &#xa;   &lt;/variables>&#xa;&#xa;   &lt;execute>&#xa;       &lt;scenario name=&quot;first scenario&quot; conditionlang=&quot;JavaScript&quot; condition=&quot;var value; value = variables.get('FIRST').getValue().equals('true');&quot;/>&#xa;       &lt;scenario name=&quot;second scenario&quot; conditionlang=&quot;JavaScript&quot; condition=&quot;var value; value = variables.get('SECOND').getValue().equals('true');&quot;/>&#xa;   &lt;/execute>&#xa;&lt;/scenario>" name="Conditional Inner Scenarios (JavaScript)" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;   &lt;name>Conditional Inner Scenarios (SQL)&lt;/name>&#xa;   &lt;description>Conditionaly Executes inner scenarios (SQL)&lt;/description>&#xa;   &lt;script>cond_inner_scenarios_sql&lt;/script>&#xa;   &lt;variables>&#xa;         &lt;FIRST label=&quot;Execute First Scenario&quot; value=&quot;true&quot; >&#xa;             &lt;item type=&quot;boolean&quot; default=&quot;true&quot; />     &#xa;         &lt;/FIRST>    &#xa;         &lt;SECOND label=&quot;Execute Second Scenario&quot; value=&quot;false&quot; >&#xa;             &lt;item type=&quot;boolean&quot; default=&quot;false&quot; />     &#xa;         &lt;/SECOND>             &#xa;   &lt;/variables>&#xa;&#xa;   &lt;execute>&#xa;       &lt;!-- please note that select count(*) is a bad technique, used here just as an example -->&#xa;       &lt;scenario name=&quot;first scenario&quot; condition=&quot;select count(*) from employee&quot; condition_connection=&quot;source&quot; />&#xa;       &lt;scenario name=&quot;second scenario&quot; condition=&quot;select count(*) from emp_photo&quot; condition_connection=&quot;source&quot; />&#xa;   &lt;/execute>&#xa;&lt;/scenario>" name="Conditional Inner Scenarios (SQL)" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;   &lt;name>Loop (SQL edition)&lt;/name>&#xa;   &lt;description>Executes inner scenarios in the loop. Groups executions in batches of the limited size.&lt;/description>&#xa;   &lt;script>loop_sql&lt;/script>&#xa;   &lt;variables>&#xa;         &lt;BATCH_COUNT label=&quot;Number of records in one batch&quot; value=&quot;10&quot; >&#xa;             &lt;item type=&quot;number&quot; default=&quot;10&quot; allownull=&quot;false&quot; minvalue=&quot;1&quot; maxvalue=&quot;200&quot; format=&quot;#&quot; />     &#xa;         &lt;/BATCH_COUNT>    &#xa;         &lt;CONDITIONS /> &lt;!-- this variable should be used in the inner scenario as a driving sql -->&#xa;   &lt;/variables>&#xa;&#xa;   &lt;execute>&#xa;       &lt;scenario name=&quot;first scenario&quot;                   &#xa;                 loop_connection=&quot;source&quot;  &#xa;                 loop=&quot;select EMPNO from employee&quot;&#xa;                 count=&quot;{BATCH_COUNT}&quot;&#xa;                 variable=&quot;CONDITIONS&quot;&#xa;                 field=&quot;EMPNO&quot; &#xa;                 pattern=&quot;select EMPNO from employee where EMPNO in (%1)&quot;&#xa;       />&#xa;   &lt;/execute>&#xa;&lt;/scenario>" name="Loop (SQL)" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;   &lt;name>Loop (JavaScript edition)&lt;/name>&#xa;   &lt;description>Executes inner scenarios in the loop. Groups executions in batches of the limited size.&lt;/description>&#xa;   &lt;script>loop_js&lt;/script>&#xa;   &lt;variables>&#xa;         &lt;BATCH_COUNT label=&quot;Number of records in one batch&quot; value=&quot;10&quot; >&#xa;             &lt;item type=&quot;number&quot; default=&quot;10&quot; allownull=&quot;false&quot; minvalue=&quot;1&quot; maxvalue=&quot;200&quot; format=&quot;#&quot; />     &#xa;         &lt;/BATCH_COUNT>    &#xa;         &lt;CONDITIONS /> &lt;!-- this variable should be used in the inner scenario as a driving sql -->&#xa;   &lt;/variables>&#xa;&#xa;   &lt;execute>&#xa;       &lt;scenario name=&quot;first scenario&quot;                   &#xa;                 looplang=&quot;JavaScript&quot;  &#xa;                 loop=&quot;var value; value = evals &amp;lt;= 40 ? evals : null;&quot;&#xa;                 count=&quot;{BATCH_COUNT}&quot;&#xa;                 variable=&quot;CONDITIONS&quot;&#xa;                 pattern=&quot;select EMPNO from employee where EMPNO in (%1)&quot;&#xa;       />&#xa;   &lt;/execute>&#xa;&lt;/scenario>" name="Loop (JavaScript)" type="1"/>
            </nodes>
        </node>
        <node name="Default functions" type="0">
            <nodes>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;!-- In this example we don't want to reuse config_property.config_property_num from the source database but we want &#xa;to keep referential integrity in the destination as well. -->&#xa;&lt;scenario>&#xa;     &lt;name>getPk and getFk usage&lt;/name>&#xa;     &lt;description>Get new primary key for the destination table and keep referential integrity&lt;/description>&#xa;     &lt;script>keys&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow> &#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>config_property&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_property&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property_num as con_prop_num, value from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>config_property_test&lt;/name>&#xa;               &lt;source>config_property&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- the CONFIG_PROPERTY_NUM value will start from 100 -->&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getPk&quot; start=&quot;100&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>config_value_test&lt;/name>&#xa;               &lt;source>config_value&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getFk&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- because there is no CONFIG_PROPERTY_NUM field in the second_config_value table we need to map existing field CONFIG_PROP_NUM to CONFIG_PROPERTY_NUM --> &#xa;                       &lt;CONFIG_PROP_NUM function=&quot;getFk&quot; field=&quot;CONFIG_PROPERTY_NUM&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Get new column value for the destination table and keep referential integrity" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Use default functions instead of driver specific&lt;/name>&#xa;     &lt;description>Use default functions instead of driver specific&lt;/description>&#xa;     &lt;script>default_functions&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.oracle.OracleDriver&lt;/driver> &#xa;     &lt;!-- or &lt;driver>auto&lt;/driver> -->&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>config_property&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_property&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>config_property&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getPk&quot; start=&quot;100&quot; class=&quot;com.toolsverse.etl.core.function.DefFunctions&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>config_value&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getFk&quot; class=&quot;com.toolsverse.etl.core.function.DefFunctions&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Use default functions instead of driver specific" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Calculate field value using JavaScript&lt;/name>&#xa;     &lt;description>Calculate field value using JavaScript&lt;/description>&#xa;     &lt;script>calculate_fields&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                      &lt;SALARY code=&quot;var value;value = fieldValue + 20000;&quot; lang=&quot;JavaScript&quot; /> &#xa;                      &lt;BONUS  code=&quot;var value;value = 0;&quot; lang=&quot;JavaScript&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Calculate field value (JavaScript)" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Exclude fields&lt;/name>&#xa;     &lt;description>Exclude fields.&lt;/description>&#xa;     &lt;script>exclude_fields&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                      &lt;SEX include=&quot;false&quot; />&#xa;                      &lt;SALARY include=&quot;false&quot; />&#xa;                      &lt;BONUS include=&quot;false&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Exclude fields" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Use scenario variables as field values&lt;/name>&#xa;     &lt;description>Assign scenario variable to the field value.&lt;/description>&#xa;     &lt;script>assign_scenario_variable&lt;/script>&#xa;     &lt;variables>&#xa;         &lt;JOB label=&quot;Job Title&quot; value=&quot;MANAGER&quot; >&#xa;             &lt;item type=&quot;select&quot; default=&quot;MANAGER&quot;>&#xa;                &lt;select> &#xa;                   &lt;value key=&quot;PRES&quot; description=&quot;Pres&quot; />&#xa;                   &lt;value key=&quot;MANAGER&quot; description=&quot;Manager&quot; />&#xa;                   &lt;value key=&quot;SALESREP&quot; description=&quot;Sales represenative&quot; />&#xa;                   &lt;value key=&quot;CLERK&quot; description=&quot;Clerk&quot; />&#xa;                   &lt;value key=&quot;ANALYST&quot; description=&quot;Analyst&quot; />&#xa;                   &lt;value key=&quot;DESIGNER&quot; description=&quot;Designer&quot; />&#xa;                   &lt;value key=&quot;FIELDREP&quot; description=&quot;Field represenative&quot; />&#xa;                &lt;/select>&#xa;             &lt;/item>&#xa;         &lt;/JOB>&#xa;         &lt;SALARY label=&quot;Salary&quot; >&#xa;            &lt;item type=&quot;number&quot; default=&quot;50000&quot; allownull=&quot;false&quot; minvalue=&quot;50000&quot; format=&quot;#&quot; />&#xa;         &lt;/SALARY>&#xa;     &lt;/variables>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee where job={JOB}&lt;/sql>&#xa;                    &lt;using>JOB&lt;/using>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                      &lt;SALARY function=&quot;getGlobalVarValue&quot; global=&quot;SALARY&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Assign scenario variable value to the field value" type="1"/>
            </nodes>
        </node>
        <node name="Transformations" type="0">
            <nodes>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Order data set&lt;/name>&#xa;     &lt;description>Order data set&lt;/description>&#xa;     &lt;script>order&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set_to_order&lt;/name>&#xa;               &lt;extract>&#xa;                   &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix.xlsx&quot; sheetname=&quot;norm&quot; />&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                    &lt;!-- order data set  -->&#xa;                    &lt;task noconnection=&quot;true&quot;>&#xa;                         &lt;name>order&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.Order&lt;/class>&#xa;                         &lt;variables>&#xa;                             &lt;ORDERBY value=&quot;first,course desc&quot;/>&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination noconnection=&quot;true&quot;>&#xa;               &lt;name>ordered_data_set&lt;/name>&#xa;               &lt;source>data_set_to_order&lt;/source>&#xa;               &lt;load>&#xa;                   &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix-output.xlsx&quot; sheetname=&quot;output&quot; />&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Order Data Set" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Transponse&lt;/name>&#xa;     &lt;description>Transponse&lt;/description>&#xa;     &lt;script>transponse&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>matrix_to_transpose&lt;/name>&#xa;               &lt;extract>&#xa;                   &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix.xlsx&quot; sheetname=&quot;trans&quot; />&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                    &lt;!-- transpose matrix  -->&#xa;                    &lt;task noconnection=&quot;true&quot;>&#xa;                         &lt;name>transponse&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.Transpose&lt;/class>&#xa;                    &lt;/task>&#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination noconnection=&quot;true&quot;>&#xa;               &lt;name>matrix_after_transpose&lt;/name>&#xa;               &lt;source>matrix_to_transpose&lt;/source>&#xa;               &lt;load>&#xa;                   &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix-output.xlsx&quot; sheetname=&quot;output&quot; />&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Transpose Matrix" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Filter data set&lt;/name>&#xa;     &lt;description>Filter data set&lt;/description>&#xa;     &lt;script>filter_data_set&lt;/script>&#xa;     &lt;variables>&#xa;          &lt;COND label=&quot;Condition&quot; value=&quot;name='Steve Jobs' or (TEST_ID='TOEFL' and SCORE > 110)&quot;/>&#xa;     &lt;/variables>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set_to_filter&lt;/name>&#xa;               &lt;extract>&#xa;                  &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}/demo/gre_toefl_scores.xlsx&quot; sheetname=&quot;scores&quot; />&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                    &lt;!-- filter data set  -->&#xa;                    &lt;task noconnection=&quot;true&quot;>&#xa;                         &lt;name>filter&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.Filter&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;CONDITION label=&quot;Condition&quot; value=&quot;{COND}&quot;/>&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination noconnection=&quot;true&quot;>&#xa;               &lt;name>filtered_data_set&lt;/name>&#xa;               &lt;source>data_set_to_filter&lt;/source>&#xa;               &lt;load>&#xa;                   &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix-output.xlsx&quot; sheetname=&quot;output&quot; />&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Filter Data Set" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Remove duplicates&lt;/name>&#xa;     &lt;description>Remove duplicates&lt;/description>&#xa;     &lt;script>remove_duplicates&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>set_to_remove_dups&lt;/name>&#xa;               &lt;extract>&#xa;                   &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix.xlsx&quot; sheetname=&quot;norm&quot; />&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                    &lt;!-- remove duplicates  -->&#xa;                    &lt;task noconnection=&quot;true&quot;>&#xa;                         &lt;name>remove_duplicated_name&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.RemoveDuplicates&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;KEYS label=&quot;Keys&quot; value=&quot;first,last&quot;/>&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;                    &lt;task noconnection=&quot;true&quot;>&#xa;                         &lt;name>remove_duplicated_cities&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.RemoveDuplicates&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;KEYS label=&quot;Keys&quot; value=&quot;city&quot;/>&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination noconnection=&quot;true&quot;>&#xa;               &lt;name>set_after_removing_dups&lt;/name>&#xa;               &lt;source>set_to_remove_dups&lt;/source>&#xa;               &lt;load>&#xa;                   &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix-output.xlsx&quot; sheetname=&quot;output&quot; />&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Remove duplicates" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Minus data sets&lt;/name>&#xa;     &lt;description>Minus one data set from another&lt;/description>&#xa;     &lt;script>minus_data_set&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set_2&lt;/name>&#xa;               &lt;extract>&#xa;                   &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix.xlsx&quot; sheetname=&quot;join&quot; />&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set_1&lt;/name>&#xa;               &lt;extract>&#xa;                   &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix.xlsx&quot; sheetname=&quot;norm&quot; />&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                    &lt;!-- join data set  -->&#xa;                    &lt;task noconnection=&quot;true&quot;>&#xa;                         &lt;name>join&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.Minus&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;MINUS value=&quot;data_set_2&quot;/>&#xa;                              &lt;KEYS value=&quot;first,last&quot;/>&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set_1&lt;/name>&#xa;               &lt;load>&#xa;                   &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix-output.xlsx&quot; sheetname=&quot;output&quot; />&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Minus one data set from another" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Union data sets&lt;/name>&#xa;     &lt;description>Union data sets&lt;/description>&#xa;     &lt;script>union_data_set&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;variables>&#xa;          &lt;UNION_TYPE label=&quot;Union Type&quot; value=&quot;union all&quot; >&#xa;             &lt;item type=&quot;select&quot; default=&quot;union all&quot;>&#xa;                &lt;select> &#xa;                   &lt;value key=&quot;union all&quot; description=&quot;union all&quot; />&#xa;                   &lt;value key=&quot;union&quot; description=&quot;union&quot; />&#xa;                &lt;/select>&#xa;             &lt;/item>&#xa;         &lt;/UNION_TYPE>&#xa;     &lt;/variables>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set_2&lt;/name>&#xa;               &lt;extract>&#xa;                   &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix.xlsx&quot; sheetname=&quot;norm2&quot; />&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set_1&lt;/name>&#xa;               &lt;extract>&#xa;                   &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix.xlsx&quot; sheetname=&quot;norm&quot; />&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                    &lt;!-- union sets  -->&#xa;                    &lt;task noconnection=&quot;true&quot;>&#xa;                         &lt;name>union&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.Union&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;UNION value=&quot;data_set_2&quot;/>&#xa;                              &lt;TYPE value=&quot;{UNION_TYPE}&quot;/>&#xa;                              &lt;KEYS value=&quot;first,last&quot;/>&#xa;                              &lt;INCLUDE value=&quot;first,last,course&quot; />&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set_1&lt;/name>&#xa;               &lt;load>&#xa;                   &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix-output.xlsx&quot; sheetname=&quot;output&quot; />&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Union of the Data Sets" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Join data sets&lt;/name>&#xa;     &lt;description>Join data sets&lt;/description>&#xa;     &lt;script>join_data_set&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;variables>&#xa;          &lt;JOIN_TYPE label=&quot;Join Type&quot; value=&quot;inner&quot; >&#xa;             &lt;item type=&quot;select&quot; default=&quot;inner&quot;>&#xa;                &lt;select> &#xa;                   &lt;value key=&quot;inner&quot; description=&quot;inner&quot; />&#xa;                   &lt;value key=&quot;outer&quot; description=&quot;outer&quot; />&#xa;                &lt;/select>&#xa;             &lt;/item>&#xa;         &lt;/JOIN_TYPE>&#xa;     &lt;/variables>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set_2&lt;/name>&#xa;               &lt;extract>&#xa;                   &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix.xlsx&quot; sheetname=&quot;join&quot; />&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set_1&lt;/name>&#xa;               &lt;extract>&#xa;                   &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix.xlsx&quot; sheetname=&quot;combine&quot; />&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                    &lt;!-- join data set  -->&#xa;                    &lt;task noconnection=&quot;true&quot;>&#xa;                         &lt;name>join&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.Join&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;JOIN value=&quot;data_set_2&quot;/>&#xa;                              &lt;TYPE value=&quot;{JOIN_TYPE}&quot;/>&#xa;                              &lt;KEYS value=&quot;first,last&quot;/>&#xa;                              &lt;EXCLUDE value=&quot;addr1&quot; />&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set_1&lt;/name>&#xa;               &lt;load>&#xa;                   &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix-output.xlsx&quot; sheetname=&quot;output&quot; />&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Join Data Sets" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Pivot Table&lt;/name>&#xa;     &lt;description>Pivot Table&lt;/description>&#xa;     &lt;script>pivot_data_set&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set&lt;/name>&#xa;               &lt;extract>&#xa;                  &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}/demo/gre_toefl_scores.xlsx&quot; sheetname=&quot;scores&quot; />&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                    &lt;!-- create pivot table  -->&#xa;                    &lt;task noconnection=&quot;true&quot;>&#xa;                         &lt;name>pivot&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.Pivot&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;KEYS value=&quot;EMPLID,TEST_ID&quot;/>&#xa;                              &lt;FIELDS value=&quot;student=EMPLID;test=TEST_ID;total_score=sum(SCORE);&#xa;                                             avg_score=avg(SCORE);max_score=max(SCORE);min_score=min(SCORE);taken=count(SCORE);&quot; />&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination noconnection=&quot;true&quot;>&#xa;               &lt;name>data_set&lt;/name>&#xa;               &lt;load>&#xa;                   &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix-output.xlsx&quot; sheetname=&quot;output&quot; />&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Pivot Table" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Denormalize data set&lt;/name>&#xa;     &lt;description>Denormalize data set&lt;/description>&#xa;     &lt;script>denorm_data_set&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>normalized_data_set&lt;/name>&#xa;               &lt;extract>&#xa;                  &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}/demo/gre_toefl_scores.xlsx&quot; sheetname=&quot;scores&quot; />&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                    &lt;!-- order data set  -->&#xa;                    &lt;task noconnection=&quot;true&quot;>&#xa;                         &lt;name>order&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.Order&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;ORDERBY label=&quot;Order By&quot; value=&quot;EMPLID,TEST_ID,TEST_COMPONENT,TEST_DT desc&quot;/>&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>denormalize_data_set&lt;/name>&#xa;               &lt;source>normalized_data_set&lt;/source>&#xa;               &lt;extract/>&#xa;               &lt;tasks>&#xa;                    &lt;!-- filter data set  -->&#xa;                    &lt;task noconnection=&quot;true&quot;>&#xa;                         &lt;name>filter&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.RemoveDuplicates&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;KEYS label=&quot;Keys&quot; value=&quot;EMPLID,TEST_ID,TEST_COMPONENT&quot;/>&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;                    &lt;!-- denormalize data set  -->&#xa;                    &lt;task noconnection=&quot;true&quot;>&#xa;                         &lt;name>denorm&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.Pivot&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;KEYS label=&quot;Keys&quot; value=&quot;EMPLID,TEST_ID&quot;/>&#xa;                              &lt;DENORMALIZE value=&quot;true&quot; />&#xa;                              &lt;EXCLUDE value=&quot;NAME,ACAD_PLAN,LS_DATA_SOURCE&quot; />&#xa;                              &lt;LEADING value=&quot;TEST_COMPONENT&quot; />&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;                    &#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination noconnection=&quot;true&quot;>&#xa;               &lt;name>denormalized_data_set&lt;/name>&#xa;               &lt;source>denormalize_data_set&lt;/source>&#xa;               &lt;load>&#xa;                   &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\matrix-output.xlsx&quot; sheetname=&quot;output&quot; />&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Denormalize Data Set" type="1"/>
            </nodes>
        </node>
        <node name="Common Tasks" type="0">
            <nodes>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Validation&lt;/name>&#xa;     &lt;description>This scenario validates fields in the employee table.&lt;/description>&#xa;     &lt;script>validation&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>valid_employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                     &lt;!-- validates EMPLOYEE.MIDINIT field. It should be not null  --> &#xa;                    &lt;task>&#xa;                         &lt;name>validate_one_field&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.Validator&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;FIELD value=&quot;MIDINIT&quot;/> &#xa;                              &lt;LANG value=&quot;JavaScript&quot;/>&#xa;                              &lt;CODE value=&quot;importPackage(com.toolsverse.etl.core.engine); &#xa;                                           importPackage(com.toolsverse.util); &#xa;                                           var value;&#xa;                                           if (Utils.isNothing(fieldValue))&#xa;                                           {&#xa;                                               value = TaskResult.REJECT;&#xa;                                           }&#xa;                                           else&#xa;                                           {&#xa;                                               value = TaskResult.CONTINUE; &#xa;                                           }&quot;&#xa;                              />&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;&#xa;                     &lt;!-- validates multiple fields.  --> &#xa;                    &lt;task>&#xa;                         &lt;name>validate_fields&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.Validator&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;LANG value=&quot;JavaScript&quot;/>&#xa;                              &lt;CODE value=&quot;importPackage(com.toolsverse.etl.core.engine); &#xa;                                           importPackage(com.toolsverse.util); &#xa;                                           var value;&#xa;&#xa;                                           if (dataSet.getFieldValue(currentRow, 'SALARY') &amp;lt; 50000 || dataSet.getFieldValue(currentRow, 'SEX').equals('M'))&#xa;                                           {&#xa;                                               value = TaskResult.REJECT;&#xa;                                           }&#xa;                                           else&#xa;                                           {&#xa;                                               value = TaskResult.CONTINUE; &#xa;                                           }&quot;&#xa;                              />&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;                    &#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;              &lt;name>valid_employee&lt;/name>&#xa;              &lt;metadata>yes&lt;/metadata>&#xa;              &lt;load stream=&quot;true&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Validation (JavaScript)" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Transformation&lt;/name>&#xa;     &lt;description>This scenario changes values of the fields extracted from employee table before loading.&lt;/description>&#xa;     &lt;script>transformation&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>trans_employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                     &lt;!-- changes single field  --> &#xa;                    &lt;task>&#xa;                         &lt;name>trans_one_field&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.EvalTransformator&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;FIELD value=&quot;JOB&quot;/> &#xa;                              &lt;LANG value=&quot;JavaScript&quot;/>&#xa;                              &lt;CODE value=&quot;var value; &#xa;                                           if (fieldValue.trim().equals('MANAGER')) &#xa;                                              value = 'BOSS' ;&#xa;                                           else &#xa;                                              value = fieldValue;&quot; />&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;&#xa;                     &lt;!-- changes multiple fields.  --> &#xa;                    &lt;task>&#xa;                         &lt;name>trans_fields&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.EvalTransformator&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;LANG value=&quot;JavaScript&quot;/>&#xa;                              &lt;CODE value=&quot;if (dataSet.getFieldValue(currentRow, 'SALARY') &amp;lt; 50000)&#xa;                                           {&#xa;                                               dataSet.setFieldValue(currentRow, 'SALARY', 60000);&#xa;                                               dataSet.setFieldValue(currentRow, 'BONUS', 0);&#xa;                                           }&quot;&#xa;                              />&#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;                    &#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;              &lt;name>trans_employee&lt;/name>&#xa;              &lt;metadata>yes&lt;/metadata>&#xa;              &lt;load stream=&quot;true&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Transformation (JavaScript)" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Regex replacament&lt;/name>&#xa;     &lt;description>This scenario changes values of the field extracted from employee table using regex before loading.&lt;/description>&#xa;     &lt;script>regex&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>regex_employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                    &lt;task>&#xa;                         &lt;name>trans_one_field&lt;/name>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.RegexpTransformator&lt;/class>&#xa;                         &lt;variables>&#xa;                              &lt;FIELD value=&quot;JOB&quot;/> &#xa;                              &lt;REGEXP value=&quot;(?i)manager&quot;/> &#xa;                              &lt;REPLACE value=&quot;boss&quot;/> &#xa;                         &lt;/variables>&#xa;                    &lt;/task>&#xa;&#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;              &lt;name>regex_employee&lt;/name>&#xa;              &lt;metadata>yes&lt;/metadata>&#xa;              &lt;load stream=&quot;true&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Regex replacement" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>SQL task&lt;/name>&#xa;     &lt;description>This scenario demonstates using of SQL Task.&lt;/description>&#xa;     &lt;script>sqltask&lt;/script>&#xa;     &lt;onpopulate action=&quot;save&quot;/>&#xa;     &lt;variables>&#xa;          &lt;GLOBAL_VAR label=&quot;Global&quot; value=&quot;global&quot;/>&#xa;     &lt;/variables>&#xa;     &lt;tasks>&#xa;          &lt;!-- drop staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>drop_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;driver>auto&lt;/driver>&#xa;               &lt;sql>drop table staging_employee&lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>&#xa;          &lt;/task>&#xa;          &lt;!-- create staging table using destination connection -->&#xa;          &lt;task>&#xa;               &lt;name>create_staging_table&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;driver>auto&lt;/driver>&#xa;               &lt;sql>&#xa;                  create table staging_employee (&#xa;                    EMPNO&#x9;     varchar(6),&#xa;                    FIRSTNME&#x9;varchar(12),&#xa;                    LASTNAME&#x9;varchar(15),&#xa;                    JOB&#x9;     varchar(8),&#xa;                    GLOBAL_VAR  varchar(100),&#xa;                    LOCAL_VAR   varchar(100)&#xa;                  );&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;     &lt;/tasks>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>staging_employee&lt;/name>&#xa;               &lt;!-- open cursor using source connection -->&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                    &lt;!-- copy records from the cursor to the staging table. keep only current row in memory -->&#xa;                    &lt;task scope=&quot;inline&quot;>&#xa;                         &lt;name>copy&lt;/name>&#xa;                         &lt;connection>dest&lt;/connection>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;                         &lt;driver>auto&lt;/driver>&#xa;                         &lt;variables>&#xa;                              &lt;TASK_VAR value=&quot;task&quot;/>&#xa;                         &lt;/variables>&#xa;                         &lt;sql>&#xa;                             insert into staging_employee&#xa;                             values ({EMPNO}, {FIRSTNME}, {LASTNAME}, {JOB}, {GLOBAL_VAR}, {TASK_VAR});&#xa;                         &lt;/sql>&#xa;                         &lt;using>GLOBAL_VAR,TASK_VAR&lt;/using>&#xa;                    &lt;/task>&#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;&lt;/scenario>&#xa;"
                    name="SQL task" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Cmd task&lt;/name>&#xa;     &lt;description>This scenario demonstrates using of Cmd Task.&lt;/description>&#xa;     &lt;script>cmdtask&lt;/script>&#xa;     &lt;tasks>&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>run_cmd&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.CmdTask&lt;/class>&#xa;               &lt;cmd>dir c:\ &amp;gt;c:\x.txt&lt;/cmd>&#xa;          &lt;/task>&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>run_cmd_success_mask&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.CmdTask&lt;/class>&#xa;               &lt;cmd>dir c:\&lt;/cmd>&#xa;               &lt;variables>&#xa;                    &lt;SUCCESS value=&quot;Directory of&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;     &lt;/tasks>&#xa;&lt;/scenario>&#xa;" name="Operating System command" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>IO tasks&lt;/name>&#xa;     &lt;description>Demonstrates using of IO tasks&lt;/description>&#xa;     &lt;script>io_tasks&lt;/script>&#xa;     &lt;variables>&#xa;          &lt;FILE_NAME label=&quot;Files (excluding path, wild card allowed)&quot;/>&#xa;          &lt;SOURCE label=&quot;From the folder&quot;/>&#xa;          &lt;DESTINATION label=&quot;To the folder (if empty local DATA folder will be used as a destination)&quot;/>&#xa;     &lt;/variables>&#xa;     &#xa;     &lt;tasks>&#xa;          &lt;!-- copies file and makes sure it was copied -->&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>copy_file&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;copy&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{SOURCE}&quot;/>&#xa;                    &lt;DESTINATION_FOLDER value=&quot;{DESTINATION}&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>check_file_count_js&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;count&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{DESTINATION}&quot;/>&#xa;                    &lt;LANG value=&quot;JavaScript&quot;/>&#xa;                    &lt;CODE value=&quot;var value; value = files.size() == 1;&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>check_file_count_var&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;count&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{DESTINATION}&quot;/>&#xa;                    &lt;COUNT value=&quot;1&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;!-- renames file -->&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>rename_file&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;rename&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;TO_FILES value=&quot;y.txt&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{DESTINATION}&quot;/>&#xa;                    &lt;DESTINATION_FOLDER value=&quot;{DESTINATION}&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;!-- deletes file and makes sure it was deleted -->&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>del_file&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;delete&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{DESTINATION}&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>check_file_count_after_delete&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;count&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{DESTINATION}&quot;/>&#xa;                    &lt;COUNT value=&quot;0&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;!-- moves file and makes sure it was moved -->&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>move_file&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;move&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{SOURCE}&quot;/>&#xa;                    &lt;DESTINATION_FOLDER value=&quot;{DESTINATION}&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>check_file_count_after_move_dest&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;count&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{DESTINATION}&quot;/>&#xa;                    &lt;COUNT value=&quot;1&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>check_file_count_after_move_source&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;count&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{SOURCE}&quot;/>&#xa;                    &lt;COUNT value=&quot;0&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>move_file_back&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;move&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{DESTINATION}&quot;/>&#xa;                    &lt;DESTINATION_FOLDER value=&quot;{SOURCE}&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;!-- renames file -->&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>rename_file&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;rename&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;TO_FILES value=&quot;y.txt&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{SOURCE}&quot;/>&#xa;                    &lt;DESTINATION_FOLDER value=&quot;{DESTINATION}&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;!-- zip file -->&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>zip_file&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;zip&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;ZIP_FILENAME value=&quot;test.zip&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{SOURCE}&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;!-- unzip file -->&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>unzip_file&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;unzip&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;ZIP_FILENAME value=&quot;test.zip&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{SOURCE}&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;!-- copies file and makes sure it was copied -->&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>copy_file_to_ftp&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;copy&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{SOURCE}&quot;/>&#xa;                    &lt;DESTINATION_TYPE value=&quot;ftp&quot;/>&#xa;                    &lt;DESTINATION_FOLDER value=&quot;some_folder&quot;/>&#xa;                    &lt;DESTINATION_URL value=&quot;ftp://ftp.someftpsite.com/&quot;/>&#xa;                    &lt;DESTINATION_USER value=&quot;user&quot;/>&#xa;                    &lt;DESTINATION_PASSWORD value=&quot;password&quot;/>&#xa;                    &lt;DESTINATION_PASSIVE_MODE value=&quot;true&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>check_file_count_after_copy_ftp&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;count&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_TYPE value=&quot;ftp&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;some_folder&quot;/>&#xa;                    &lt;SOURCE_URL value=&quot;ftp://ftp.someftpsite.com/&quot;/>&#xa;                    &lt;SOURCE_USER value=&quot;user&quot;/>&#xa;                    &lt;SOURCE_PASSWORD value=&quot;password&quot;/>&#xa;                    &lt;SOURCE_PASSIVE_MODE value=&quot;true&quot;/>&#xa;                    &lt;COUNT value=&quot;1&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;!-- copies file and makes sure it was copied -->&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>copy_file_to_sftp&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;copy&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{SOURCE}&quot;/>&#xa;                    &lt;DESTINATION_TYPE value=&quot;sftp&quot;/>&#xa;                    &lt;DESTINATION_FOLDER value=&quot;some_folder&quot;/>&#xa;                    &lt;DESTINATION_URL value=&quot;some_sftp_url&quot;/>&#xa;                    &lt;DESTINATION_USER value=&quot;user&quot;/>&#xa;                    &lt;DESTINATION_PASSWORD value=&quot;password&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>check_file_count_after_copy_sftp&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;count&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_TYPE value=&quot;sftp&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;some_sftp_folder&quot;/>&#xa;                    &lt;SOURCE_URL value=&quot;some_sftp_url&quot;/>&#xa;                    &lt;SOURCE_USER value=&quot;user&quot;/>&#xa;                    &lt;SOURCE_PASSWORD value=&quot;password&quot;/>&#xa;                    &lt;COUNT value=&quot;1&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &lt;!-- copies file from sftp to ftp -->&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>copy_file_from_sftp_to_ftp&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;copy&quot;/>&#xa;                    &lt;FILES value=&quot;{FILE_NAME}&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{SOURCE}&quot;/>&#xa;                    &lt;SOURCE_TYPE value=&quot;ftp&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;some_ftp_folder&quot;/>&#xa;                    &lt;SOURCE_URL value=&quot;some_ftp_url&quot;/>&#xa;                    &lt;SOURCE_USER value=&quot;user&quot;/>&#xa;                    &lt;SOURCE_PASSWORD value=&quot;password&quot;/>&#xa;                    &lt;DESTINATION_TYPE value=&quot;sftp&quot;/>&#xa;                    &lt;DESTINATION_FOLDER value=&quot;some_folder&quot;/>&#xa;                    &lt;DESTINATION_URL value=&quot;some_sftp_url&quot;/>&#xa;                    &lt;DESTINATION_USER value=&quot;user&quot;/>&#xa;                    &lt;DESTINATION_PASSWORD value=&quot;password&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;     &lt;/tasks>&#xa;&lt;/scenario>&#xa;"
                    name="IO tasks" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>XSL transormation&lt;/name>&#xa;     &lt;description>This scenario demonstrates XSL transormation&lt;/description>&#xa;     &lt;script>xsl_trans&lt;/script>&#xa;     &lt;tasks>&#xa;          &lt;task noconnection=&quot;true&quot;>&#xa;               &lt;name>xsl_trans&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.XslTransormTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;SOURCE value=&quot;{app.root.data}/demo/web_test_result_set.xml&quot;/>&#xa;                    &lt;DESTINATION value=&quot;{app.root.data}/demo/test_result_set.xml&quot;/>&#xa;                    &lt;XSL value=&quot;{app.root.data}/demo/webrowset2dataset.xsl&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;     &lt;/tasks>&#xa;&lt;/scenario>" name="XSL transformation" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Before and After tasks&lt;/name>&#xa;     &lt;description>This scenario demonstates before and after tasks.&lt;/description>&#xa;     &lt;script>before_after_task&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;variables>&#xa;          &lt;GLOBAL_VAR label=&quot;Global&quot; value=&quot;global&quot;/>&#xa;     &lt;/variables>&#xa;&#xa;     &lt;!-- this tasks executed before extract -->&#xa;     &lt;beforetasks>&#xa;          &lt;!-- drop staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>drop_staging_table_before&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;driver>auto&lt;/driver>&#xa;               &lt;sql>drop table staging_employee&lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>&#xa;          &lt;/task>&#xa;          &lt;!-- create staging table using destination connection -->&#xa;          &lt;task>&#xa;               &lt;name>create_staging_table&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;driver>auto&lt;/driver>&#xa;               &lt;sql>&#xa;                  create table staging_employee (&#xa;                    EMPNO&#x9;     varchar(6),&#xa;                    FIRSTNME&#x9;varchar(12),&#xa;                    LASTNAME&#x9;varchar(15),&#xa;                    JOB&#x9;     varchar(8),&#xa;                    GLOBAL_VAR  varchar(100),&#xa;                    LOCAL_VAR   varchar(100)&#xa;                  );&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;     &lt;/beforetasks>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>staging_employee&lt;/name>&#xa;               &lt;!-- open cursor using source connection -->&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;               &lt;tasks>&#xa;                    &lt;!-- copy records from the cursor to the staging table. keep only current row in memory -->&#xa;                    &lt;task scope=&quot;inline&quot;>&#xa;                         &lt;name>copy&lt;/name>&#xa;                         &lt;connection>dest&lt;/connection>&#xa;                         &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;                         &lt;driver>auto&lt;/driver>&#xa;                         &lt;variables>&#xa;                              &lt;TASK_VAR value=&quot;task&quot;/>&#xa;                         &lt;/variables>&#xa;                         &lt;sql>&#xa;                             insert into staging_employee&#xa;                             values ({EMPNO}, {FIRSTNME}, {LASTNAME}, {JOB}, {GLOBAL_VAR}, {TASK_VAR});&#xa;                         &lt;/sql>&#xa;                         &lt;using>GLOBAL_VAR,TASK_VAR&lt;/using>&#xa;                    &lt;/task>&#xa;               &lt;/tasks>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor&lt;/name>&#xa;               &lt;tablename>employee_before_after&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor sql=&quot;select * from staging_employee&quot;/>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&#xa;     &lt;!-- this task executed after load -->&#xa;     &lt;aftertasks>&#xa;          &lt;!-- drop staging table -->&#xa;          &lt;task>&#xa;               &lt;name>drop_staging_table_after&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>drop table staging_employee&lt;/sql>&#xa;          &lt;/task>&#xa;     &lt;/aftertasks>&#xa;     &#xa;&lt;/scenario>"
                    name="Before and after tasks" type="1"/>
            </nodes>
        </node>
        <node name="XML Files" type="0">
            <nodes>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from xml to database&lt;/name>&#xa;     &lt;description>Export from xml to database using pre-configured xml connection. Creates table if needed.&lt;/description>&#xa;     &lt;script>move_xml&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract />&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Export from xml to database using pre-configured xml connection" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from xml to database&lt;/name>&#xa;     &lt;description>Export from xml to database using hard coded file name. Creates table if needed.&lt;/description>&#xa;     &lt;script>move_xml_file_name&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;reader class=&quot;com.toolsverse.etl.connector.xml.XmlConnector&quot; filename=&quot;{app.root.data}\demo\EMPLOYEE.xml&quot; />&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from xml to database using hard coded file name" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from xml to database&lt;/name>&#xa;     &lt;description>Export from xml to database with xsl transformation using hard coded xml and xsl file names. Creates table if needed.&lt;/description>&#xa;     &lt;script>move_xml_xsl_file_name&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>webrowset&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;reader class=&quot;com.toolsverse.etl.connector.xml.XmlConnector&quot; filename=&quot;{app.root.data}\demo\web_test_result_set.xml&quot; xsl=&quot;{app.root.data}\schema\webrowset2dataset.xsl&quot;/>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>webrowset&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from xml to database with xsl transformation using hard coded xml and xsl file names" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Save database table as xml&lt;/name>&#xa;     &lt;description>Export from database table to xml using xsl transformation&lt;/description>&#xa;     &lt;script>save_as_xml&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_webrowset&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot;/>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.xml.XmlConnector&quot; filename=&quot;{app.root.data}\demo\employee_webrowset.xml&quot; xsl=&quot;{app.root.data}\schema\dataset2webrowset.xsl&quot;/>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;&lt;/scenario>" name="Export from database table to xml using xsl transformation" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Save database table as xml&lt;/name>&#xa;     &lt;description>Extract data from database table and load into xml file using xsl transformation&lt;/description>&#xa;     &lt;script>save_as_xml_dest&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_webrowset&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;&#xa;     &lt;destinations>&#xa;        &lt;destination noconnection=&quot;true&quot;>&#xa;            &lt;name>employee_webrowset&lt;/name>&#xa;            &lt;load>&#xa;               &lt;writer class=&quot;com.toolsverse.etl.connector.xml.XmlConnector&quot; filename=&quot;{app.root.data}\demo\employee_webrowset.xml&quot; xsl=&quot;{app.root.data}\schema\dataset2webrowset.xsl&quot;/>&#xa;            &lt;/load>&#xa;        &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Extract data from database table and load into xml file using xsl transformation" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Load data from xml into database&lt;/name>&#xa;     &lt;description>Load data from xml into database using hard coded file name. Create table if needed.&lt;/description>&#xa;     &lt;script>load_xml_file&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;allow>LOAD&lt;/allow>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_load&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;reader class=&quot;com.toolsverse.etl.connector.xml.XmlConnector&quot; filename=&quot;{app.root.data}\demo\EMPLOYEE.xml&quot; />&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Load data from xml into database using hard coded file name" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Using properties to configure date+time formats&lt;/name>&#xa;     &lt;description>Using properties to configure date+time formats&lt;/description>&#xa;     &lt;script>save_as_xml_date&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_webrowset&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;&#xa;     &lt;destinations>&#xa;        &lt;destination noconnection=&quot;true&quot;>&#xa;            &lt;name>employee_webrowset&lt;/name>&#xa;            &lt;load>&#xa;               &lt;writer class=&quot;com.toolsverse.etl.connector.xml.XmlConnector&quot; date=&quot;MMddyyyy&quot; datetime=&quot;MMddyyyy&quot; time=&quot;HH:mm:ss&quot; filename=&quot;{app.root.data}\demo\employee_date.xml&quot; />&#xa;            &lt;/load>&#xa;        &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Using properties to configure date+time formats" type="1"/>
            </nodes>
        </node>
        <node name="Text Files" type="0">
            <nodes>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Save database table as text file&lt;/name>&#xa;     &lt;description>Export from database table as to ';' delimited text file&lt;/description>&#xa;     &lt;script>save_as_txt&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_text&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot;/> &lt;!-- this is important, otherwise file will not be created -->&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.text.TextConnector&quot; delimiter=&quot;;&quot; metadata=&quot;false&quot; firstrow=&quot;false&quot; filename=&quot;{app.root.data}/demo/employee_text.txt&quot; /> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;&lt;/scenario>" name="Export from database table as to ';' delimited text file" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Save database table as text file&lt;/name>&#xa;     &lt;description>Export database table to the fixed lenth text file&lt;/description>&#xa;     &lt;script>save_as_filex_length_txt&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_text_fixed_length&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot;/>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,LASTNAME,JOB from employee&lt;/sql> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.text.TextConnector&quot; delimiter=&quot;;&quot; fields=&quot;6;12;15;8&quot; metadata=&quot;false&quot; firstrow=&quot;false&quot; filename=&quot;{app.root.data}/demo/employee_text_fixed_length.txt&quot; /> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;&lt;/scenario>" name="Export database table to the fixed lenth text file" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from text to database&lt;/name>&#xa;     &lt;description>Export from &quot;;&quot; delimited text file to database using pre-configured txt connection. Creates table if needed.&lt;/description>&#xa;     &lt;script>move_txt&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_text&lt;/name>&#xa;               &lt;extract />&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_text&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from &quot;;&quot; delimited text file to database using pre-configured text connection" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from text file to database&lt;/name>&#xa;     &lt;description>Export from text file to database using hard coded file name. Creates table if needed.&lt;/description>&#xa;     &lt;script>move_text_file_name&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>employee_text&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;reader class=&quot;com.toolsverse.etl.connector.text.TextConnector&quot; delimiter=&quot;;&quot; firstrow=&quot;false&quot; filename=&quot;{app.root.data}\demo\employee_text.txt&quot; />&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_text&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from text file to database using hard coded file name" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from database to text file&lt;/name>&#xa;     &lt;description>Export from database to text file using hard coded file name&lt;/description>&#xa;     &lt;script>copy_to_text&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_to_text&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination noconnection=&quot;true&quot;>&#xa;               &lt;name>employee_to_text&lt;/name>&#xa;               &lt;load>&#xa;                  &lt;writer class=&quot;com.toolsverse.etl.connector.text.TextConnector&quot; delimiter=&quot;;&quot; firstrow=&quot;false&quot; filename=&quot;{app.root.data}\demo\employee_text.txt&quot; />&#xa;               &lt;/load>   &#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from database to text file using hard coded file name" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from database to text file&lt;/name>&#xa;     &lt;description>Export from database to text file using pre configured text connection.&lt;/description>&#xa;     &lt;script>move_to_text&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_to_text&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_to_text&lt;/name>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from database to text file using pre configured text connection" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from text to database&lt;/name>&#xa;     &lt;description>Export text file to database using pre-configured text connection. Calculate\exclude fields. Create table if needed.&lt;/description>&#xa;     &lt;script>move_txt_calc&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_text_calc&lt;/name>&#xa;               &lt;extract />&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_text_calc&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;SALARY include=&quot;false&quot; />&#xa;                       &lt;BONUS include=&quot;false&quot; />&#xa;                       &lt;JOB code=&quot;var value;value = '\'NO JOB\'';&quot; lang=&quot;JavaScript&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export text file to database using pre-configured text connection. Calculate\exclude fields." type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Using properties to configure file format&lt;/name>&#xa;     &lt;description>Using properties to configure file format&lt;/description>&#xa;     &lt;script>save_as_text&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;!-- Create fixed length file, use first row for field names -->&#xa;          &lt;source>&#xa;               &lt;name>fixed_length&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot;/>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,LASTNAME,JOB from employee&lt;/sql> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.text.TextConnector&quot; delimiter=&quot;;&quot; fields=&quot;6;12;15;8&quot; metadata=&quot;false&quot; firstrow=&quot;false&quot; filename=&quot;{app.root.data}/demo/employee_text_fixed_length.txt&quot; /> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;!-- Create &quot;;&quot; delimited text file, use first row for field names --> &#xa;          &lt;source>&#xa;               &lt;name>delimited_file&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot;/>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,LASTNAME,JOB from employee&lt;/sql> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.text.TextConnector&quot; delimiter=&quot;;&quot; metadata=&quot;false&quot; firstrow=&quot;false&quot; filename=&quot;{app.root.data}/demo/employee_delimited.txt&quot; /> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;!-- Create &quot;;&quot; delimited text file, use first row for data --> &#xa;          &lt;source>&#xa;               &lt;name>delimited_file_first&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot;/>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,LASTNAME,JOB from employee&lt;/sql> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.text.TextConnector&quot; delimiter=&quot;;&quot; metadata=&quot;false&quot; firstrow=&quot;true&quot; filename=&quot;{app.root.data}/demo/employee_delimited_first.txt&quot; /> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;          &lt;!-- Create &quot;;&quot; delimited text file, use first row for data, create xml file with metadata --> &#xa;          &lt;source>&#xa;               &lt;name>delimited_file_metadata&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot;/>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,LASTNAME,JOB from employee&lt;/sql> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.text.TextConnector&quot; delimiter=&quot;;&quot; metadata=&quot;true&quot; firstrow=&quot;true&quot; filename=&quot;{app.root.data}/demo/employee_delimited_metadata.txt&quot; /> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;!-- Create &quot;;&quot; delimited text file, use &quot; as a separator for char fields and first row for field names --> &#xa;          &lt;source>&#xa;               &lt;name>delimited_with_char_separator_file&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot;/>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,LASTNAME,JOB from employee&lt;/sql> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.text.TextConnector&quot; delimiter=&quot;;&quot; charseparator='&quot;' metadata=&quot;false&quot; firstrow=&quot;false&quot; filename=&quot;{app.root.data}/demo/employee_delimited_sep.txt&quot; /> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;!-- Create &quot;;&quot; delimited text file, use &quot; as a separator for char fields and first row for field names --> &#xa;          &lt;source>&#xa;               &lt;name>delimited_file_date&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot;/>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.text.TextConnector&quot; date=&quot;MMddyyyy&quot; datetime=&quot;MMddyyyy&quot; time=&quot;HH:mm:ss&quot; delimiter=&quot;;&quot; charseparator='&quot;' metadata=&quot;false&quot; firstrow=&quot;false&quot; filename=&quot;{app.root.data}/demo/employee_delimited_date.txt&quot; /> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;          &#xa;          &#xa;     &lt;/sources>&#xa;&lt;/scenario>"
                    name="Using properties to configure file format" type="1"/>
            </nodes>
        </node>
        <node name="Excel" type="0">
            <nodes>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from database to excel&lt;/name>&#xa;     &lt;description>Export from database to Excel using pre-configured Excel connection.&lt;/description>&#xa;     &lt;script>move_to_excel&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract> &#xa;                   &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from database to Excel using pre-configured excel connection" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from excel to database&lt;/name>&#xa;     &lt;description>Export from Excel to database using pre-configured Excel connection.&lt;/description>&#xa;     &lt;script>move_from_excel&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_excel&lt;/name>&#xa;               &lt;extract />&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_excel&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from Excel to database using pre-configured Excel connection" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from excel to database&lt;/name>&#xa;     &lt;description>Export from Excel (1997-2003) to database using hard coded file name. Creates table if needed.&lt;/description>&#xa;     &lt;script>move_excel_file_name&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>employee_excel&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelConnector&quot; filename=&quot;{app.root.data}\demo\employee_excel.xls&quot; sheetname=&quot;Employee&quot; />&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_excel&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from Excel (1997-2003) to database using hard coded file name" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from excel to database&lt;/name>&#xa;     &lt;description>Export from Excel (2007) to database using hard coded file name. Creates table if needed.&lt;/description>&#xa;     &lt;script>move_excel_file_name&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>employee_excel&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\employee_excel.xlsx&quot; sheetname=&quot;Employee&quot; />&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_excel&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from Excel (2007) to database using hard coded file name" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from excel to database using ODBC&lt;/name>&#xa;     &lt;description>Export from Excel (1997-2003) to database using ODBC. Creates table if needed.&lt;/description>&#xa;     &lt;script>move_excel_odbc&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_excel&lt;/name>&#xa;               &lt;extract>&#xa;                   &lt;sql>select * from [employee$]&lt;/sql> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_excel&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from Excel (1997-2003) to database using ODBC" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from database to Excel using ODBC&lt;/name>&#xa;     &lt;description>Export from database to Excel (1997-2003) using ODBC. Calculate\exclude fields. Create sheet if needed.&lt;/description>&#xa;     &lt;script>move_to_excel_odbc&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.excel.ExcelOdbcDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                  &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_list&lt;/tablename>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;SALARY include=&quot;false&quot; />&#xa;                       &lt;BONUS include=&quot;false&quot; />&#xa;                       &lt;JOB code=&quot;var value;value = '\'NO JOB\'';&quot; lang=&quot;JavaScript&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from database to Excel (1997-2003) using ODBC" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from database to excel file&lt;/name>&#xa;     &lt;description>Export from database to Excel (1997-2003) file using hard coded file name&lt;/description>&#xa;     &lt;script>copy_to_excel&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_to_excel&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination noconnection=&quot;true&quot;>&#xa;               &lt;name>employee_to_excel&lt;/name>&#xa;               &lt;load>&#xa;                  &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelConnector&quot; filename=&quot;{app.root.data}\demo\employee_to_excel.xls&quot; sheetname=&quot;employee&quot; />&#xa;               &lt;/load>   &#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from database to Excel (1997-2003) file using hard coded file name" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Copy from database to excel file&lt;/name>&#xa;     &lt;description>Export from database to Excel (1997-2003) file using hard coded file name&lt;/description>&#xa;     &lt;script>copy_to_excel&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_to_excel&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination noconnection=&quot;true&quot;>&#xa;               &lt;name>employee_to_excel&lt;/name>&#xa;               &lt;load>&#xa;                  &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}\demo\employee_to_excel.xlsx&quot; sheetname=&quot;employee&quot; />&#xa;               &lt;/load>   &#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Export from database to Excel (2007) file using hard coded file name" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Save database table as excel file&lt;/name>&#xa;     &lt;description>Export from database table to Excel (1997-2003) file&lt;/description>&#xa;     &lt;script>save_as_excel&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_save_excel&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot;/>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelConnector&quot; filename=&quot;{app.root.data}/demo/employee_excel_save.xls&quot; sheetname=&quot;employee&quot; /> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;&lt;/scenario>" name="Export from database table to Excel (1997-2003) file" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Save database table as excel file&lt;/name>&#xa;     &lt;description>Export from database table to Excel (2007) file&lt;/description>&#xa;     &lt;script>save_as_excel&lt;/script>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee_save_excel&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot;/>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}/demo/employee_excel_save.xlsx&quot; sheetname=&quot;employee&quot; /> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;&lt;/scenario>" name="Export from database table to Excel (2007) file" type="1"/>
            </nodes>
        </node>
        <node name="Readers and Writers" type="0">
            <nodes>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Xml to Excel to Text to Database&lt;/name>&#xa;     &lt;description>Xml to Excel 2003 to Excel 2007 to Text to Database&lt;/description>&#xa;     &lt;script>xml2excel2excelxlsx2text2db&lt;/script>&#xa;     &lt;driver>auto&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot; />&#xa;               &lt;extract>&#xa;                    &lt;reader class=&quot;com.toolsverse.etl.connector.xml.XmlConnector&quot; filename=&quot;{app.root.data}/demo/employee.xml&quot; /> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelConnector&quot; filename=&quot;{app.root.data}/demo/xml2excel2text2db.xls&quot; sheetname=&quot;Employee&quot; /> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>excel2003&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot; />&#xa;               &lt;extract>&#xa;                    &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelConnector&quot; filename=&quot;{app.root.data}/demo/xml2excel2text2db.xls&quot; sheetname=&quot;Employee&quot; /> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}/demo/xml2excel2text2db.xlsx&quot; sheetname=&quot;Employee&quot; /> &#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;          &lt;source noconnection=&quot;true&quot;>&#xa;               &lt;name>excel2007&lt;/name>&#xa;               &lt;onpersist action=&quot;save&quot; />&#xa;               &lt;extract>&#xa;                    &lt;reader class=&quot;com.toolsverse.etl.connector.excel.ExcelXlsxConnector&quot; filename=&quot;{app.root.data}/demo/xml2excel2text2db.xlsx&quot; sheetname=&quot;Employee&quot; /> &#xa;                    &lt;writer class=&quot;com.toolsverse.etl.connector.text.TextConnector&quot; delimiter=&quot;;&quot; firstrow=&quot;false&quot; metadata=&quot;false&quot; filename=&quot;{app.root.data}/demo/xml2excel2text2db.txt&quot; />&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;&#xa;     &lt;destinations>&#xa;         &lt;destination>&#xa;             &lt;name>employee_from_text&lt;/name>&#xa;             &lt;source>excel2003&lt;/source>&#xa;             &lt;metadata>yes&lt;/metadata>&#xa;             &lt;load>&#xa;                 &lt;reader class=&quot;com.toolsverse.etl.connector.text.TextConnector&quot; delimiter=&quot;;&quot; firstrow=&quot;false&quot; metadata=&quot;false&quot; filename=&quot;{app.root.data}/demo/xml2excel2text2db.txt&quot; />&#xa;             &lt;/load>>&#xa;         &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Xml to Excel 2003 to Excel 2007 to Text to Database" type="1"/>
            </nodes>
        </node>
        <node name="Oracle" type="0">
            <nodes>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Move data&lt;/name>&#xa;     &lt;description>Moves blobs, clobs and other types of data. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.oracle.OracleDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                  &lt;!-- the source is a varchar(...) so need to define type as Oracle CLOB -->&#xa;                  &lt;variables>&#xa;                      &lt;RESUME nativetype=&quot;CLOB&quot; />&#xa;                  &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Move blobs, clobs and other types of data. Create tables if needed." type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Oracle getPk and getFk&lt;/name>&#xa;     &lt;description>Get new primary key for the destination table using Oracle sequence and keep referential integrity&lt;/description>&#xa;     &lt;script>oracle_keys&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow> &#xa;     &lt;driver>com.toolsverse.etl.driver.oracle.OracleDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>config_property&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property.*, config_property_num as cfg_prop_num from config_property&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property_num as con_prop_num, value from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>config_property_test&lt;/name>&#xa;               &lt;source>config_property&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- get value using sequence -->&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getPk&quot; sequence=&quot;SQ_CONFIG_PROPERTY&quot; />&#xa;                       &lt;CFG_PROP_NUM include=&quot;false&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>config_property_two&lt;/name>&#xa;               &lt;source>config_property&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_PROPERTY_NUM include=&quot;false&quot; />&#xa;                       &lt;!-- get value using sql -->&#xa;                       &lt;CFG_PROP_NUM function=&quot;getPk&quot; sql=&quot;{CONFIG_PROPERTY_NUM} + 10000&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &#xa;          &lt;destination>&#xa;               &lt;name>config_value_test&lt;/name>&#xa;               &lt;source>config_value&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getFk&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- because there is no CONFIG_PROPERTY_NUM field in the second_config_value table we need to map existing field CONFIG_PROP_NUM to CFG_PROP_NUM --> &#xa;                       &lt;CON_PROP_NUM function=&quot;getFk&quot; field=&quot;CFG_PROP_NUM&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Get new column value for the destination table using Oracle sequence and keep referential integrity" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>PL/SQL in the etl scenario&lt;/name>&#xa;     &lt;description>PL/SQL in the etl scenario&lt;/description>&#xa;     &lt;script>plsql&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.oracle.OracleDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_plsql&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;EMPNO /> &#xa;                       &lt;!-- any plsql code allowed here, not just variable assigmnet --> &#xa;                       &lt;TEST type=&quot;DATE&quot; sql=&quot;{TEST}:= sysdate;&quot; /> &#xa;                       &lt;FIRSTNME />&#xa;                       &lt;MIDINIT />&#xa;                       &lt;LASTNAME />&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;sql>&#xa;                       if {SEX} = 'M' then&#xa;                           insert into employee_plsql (EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX)&#xa;                           values ({EMPNO},{FIRSTNME},{MIDINIT},{LASTNAME},{TEST},'M');&#xa;                       end if;&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="PL/SQL in the etl scenario" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>PL/SQL function&lt;/name>&#xa;     &lt;description>Create PL/SQL function and use it in the etl scenario. Use global variable&lt;/description>&#xa;     &lt;script>plsql_function&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.oracle.OracleDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;variables>&#xa;        &lt;!-- define global variable -->&#xa;        &lt;VAL type=&quot;NUMBER(6):= 0&quot; global=&quot;true&quot; />&#xa;     &lt;/variables>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination type=&quot;function&quot;>&#xa;               &lt;name>to_value&lt;/name>&#xa;               &lt;load>&#xa;                    &lt;sql>&#xa;                        FUNCTION to_value(v_value in NUMBER) RETURN CHAR&#xa;                        IS  &#xa;                        BEGIN&#xa;                           return to_char(v_value);&#xa;                        END;&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_function&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                    &lt;variables>&#xa;                         &lt;VAL sql=&quot;{VAL}:= {VAL} + 1;&quot; include=&quot;false&quot; />&#xa;                         &lt;EMPNO sql=&quot;{EMPNO}:= to_value({VAL});&quot; />&#xa;                    &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Create PL/SQL function and use it in the etl scenario. Use Oracle global variable" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Oracle cursor&lt;/name>&#xa;     &lt;description>Use Oracle cursors in the etl scenario&lt;/description>&#xa;     &lt;script>oracle_cursor&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.oracle.OracleDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>trunk_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   TRUNCATE TABLE employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>&#xa;          &lt;/task>&#xa;     &lt;/tasks>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination scope=&quot;single&quot;>&#xa;               &lt;name>employee_stage&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor sql=&quot;select * from employee_stage&quot;/>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor_table&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Use Oracle cursors in the etl scenario" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario requiresource=&quot;true&quot;>&#xa;     &lt;name>sqlplus COPY command&lt;/name>&#xa;     &lt;description>Use sqlplus COPY command to copy data from one table to another. Possible in different databases&lt;/description>&#xa;     &lt;script>oracle_copy&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.oracle.OracleDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;variables>&#xa;        &lt;NAME label=&quot;Property Name:&quot; value = &quot;test&quot; />&#xa;     &lt;/variables>&#xa;     &lt;tasks>&#xa;     &#xa;          &lt;!-- drop staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>drop_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   DROP TABLE config_property_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>create_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   create TABLE config_property_stage&#xa;                   (&#xa;                     CONFIG_PROPERTY_NUM&#x9;NUMBER(18),&#xa;                     NAME&#x9;VARCHAR2(255),&#xa;                     DESCRIPTION&#x9;VARCHAR2(255)&#xa;                   );&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>copy_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.oracle.OracleCopyTask&lt;/class>&#xa;               &lt;sql>&#xa;                   insert config_property_stage USING&#xa;                   select unique CONFIG_PROPERTY_NUM,NAME,DESCRIPTION&#xa;                   from config_property&#xa;                   where upper(name) like upper('%{NAME}%')&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;     &lt;/tasks>&#xa;     &#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>cfg_props&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;config_property_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Usel sqlplus COPY command to copy data from one table to another. Possible in different databases" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Oracle Extract and Load&lt;/name>&#xa;     &lt;description>Oracle Extract using slplus and Load using sql*loader&lt;/description>&#xa;     &lt;script>oracle_sql_loader&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.oracle.OracleDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;variables>&#xa;        &lt;NAME label=&quot;Property Name:&quot; value = &quot;test&quot; />&#xa;     &lt;/variables>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>drop_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   DROP TABLE config_property_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>create_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   create TABLE config_property_stage&#xa;                   (&#xa;                     CONFIG_PROPERTY_NUM&#x9;NUMBER(18),&#xa;                     NAME&#x9;VARCHAR2(255),&#xa;                     DESCRIPTION&#x9;VARCHAR2(255)&#xa;                   );&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>config_property_extract&lt;/name>&#xa;               &lt;connection>source&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.oracle.OracleExtractTask&lt;/class>&#xa;               &lt;sql>&#xa;                   select CONFIG_PROPERTY_NUM || '|' ||&#xa;                          NAME || '|' ||&#xa;                          DESCRIPTION&#xa;                   from config_property&#xa;                   where upper(name) like upper('%{NAME}%')&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>load&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.oracle.OracleLoadTask&lt;/class>&#xa;               &lt;sql>&#xa;                       LOAD DATA&#xa;                       INFILE '{DATA_FOLDER}config_property_extract.dat'&#xa;                       APPEND INTO TABLE config_property_stage&#xa;                       FIELDS TERMINATED BY &quot;|&quot;&#xa;                       trailing nullcols&#xa;                       (&#xa;                          CONFIG_PROPERTY_NUM,&#xa;                          NAME,&#xa;                          DESCRIPTION&#xa;                       )&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;          &#xa;     &lt;/tasks>&#xa;     &#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>cfg_props&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;config_property_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Oracle Extract using slplus and Load using sql*loader" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Oracle merge, update, delete&lt;/name>&#xa;     &lt;description>Oracle merge, update, delete&lt;/description>&#xa;     &lt;script>oracle_merge_data&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;driver>com.toolsverse.etl.driver.oracle.OracleDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_upsert&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>delete&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;delete&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;condition>{SEX} = 'M'&lt;/condition>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>update&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;update&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;{SEX}:= 'U';&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>merge&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;merge&quot; key=&quot;EMPNO&quot; > &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;if {SEX} = 'M' then &#xa;                                     {SEX}:= 'I'; &#xa;                                 else &#xa;                                     {SEX}:= 'U'; &#xa;                                 end if;&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;          &#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Oracle merge, update, delete" type="1"/>
            </nodes>
        </node>
        <node name="DB2" type="0">
            <nodes>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Move data&lt;/name>&#xa;     &lt;description>Moves blobs, clobs and other types of data. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.db2.Db2Driver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                  &lt;!-- the source is a varchar(...) so need to define type as DB2 CLOB -->&#xa;                  &lt;variables>&#xa;                      &lt;RESUME nativetype=&quot;CLOB&quot; />&#xa;                  &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Move blobs, clobs and other types of data. Create tables if needed." type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Db2 getPk getSeq and getFk&lt;/name>&#xa;     &lt;description>Get new column value using Db2 autoincrement column and sequence and keep referential integrity&lt;/description>&#xa;     &lt;script>db2_keys&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow> &#xa;     &lt;driver>com.toolsverse.etl.driver.db2.Db2Driver&lt;/driver>&#xa;&#xa;     &lt;tasks>&#xa;           &lt;task>&#xa;              &lt;name>drop_table&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;sql>&#xa;                  drop table config_property_test;&#xa;              &lt;/sql>&#xa;              &lt;onexception action=&quot;ignore&quot;/>&#xa;           &lt;/task>  &#xa;     &#xa;           &lt;task>&#xa;              &lt;name>create_table&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;sql>&#xa;                 create table config_property_test&#xa;                 (&#xa;                      CONFIG_PROPERTY_NUM&#x9;DECIMAL(18)&#x9;not null,&#xa;                      NAME&#x9;VARCHAR(255),&#xa;                      DESCRIPTION&#x9;VARCHAR(255),&#x9;&#xa;                      DEFAULT_VALUE&#x9;VARCHAR(3000),&#x9;&#xa;                      CFG_PROP_NUM&#x9;INTEGER GENERATED ALWAYS AS IDENTITY,&#xa;                      CONFIG_NUM&#x9;DECIMAL(18)&#x9;not null&#xa;                 )      &#xa;              &lt;/sql>&#xa;           &lt;/task>     &#xa;      &lt;/tasks>      &#xa;&#xa;     &#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>config_property&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property.*, config_property.config_property_num as cfg_prop_num, config_property.config_property_num as CONFIG_NUM &#xa;                         from config_property&#xa;                    &lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property_num as con_prop_num, value from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>config_property_test&lt;/name>&#xa;               &lt;source>config_property&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- get value using autoincrement field --> &#xa;                       &lt;CFG_PROP_NUM function=&quot;getAutoInc&quot; /> &lt;!-- CFG_PROP_NUM must be GENERATED ALWAYS AS IDENTITY -->&#xa;                       &lt;!-- get value using sequence --> &#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getPk&quot; sequence=&quot;SAMPSEQUENCE&quot; />&#xa;                       &lt;!-- get value using sql --> &#xa;                       &lt;CONFIG_NUM function=&quot;getPk&quot; sql=&quot;{CFG_PROP_NUM} + 10000&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>config_value_test&lt;/name>&#xa;               &lt;source>config_value&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getFk&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- map CONFIG_PROP_NUM to CONFIG_NUM --> &#xa;                       &lt;CON_PROP_NUM function=&quot;getFk&quot; field=&quot;CONFIG_NUM&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Get new column value using Db2 autoincrement column and sequence and keep referential integrity" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>SQL PL in the etl scenario&lt;/name>&#xa;     &lt;description>SQL PL in the etl scenario&lt;/description>&#xa;     &lt;script>plsql&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.db2.Db2Driver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_sqlpl&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;EMPNO /> &#xa;                       &lt;!-- any sql pl code allowed here, not just variable assigmnet --> &#xa;                       &lt;TEST type=&quot;DATE&quot; sql=&quot;set {TEST} = CURRENT_DATE;&quot; /> &#xa;                       &lt;FIRSTNME />&#xa;                       &lt;MIDINIT />&#xa;                       &lt;LASTNAME />&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;sql>&#xa;                       if {SEX} = 'M' then&#xa;                           insert into employee_sqlpl (EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX)&#xa;                           values ({EMPNO},{FIRSTNME},{MIDINIT},{LASTNAME},{TEST},'M');&#xa;                       end if;&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="SQL PL in the etl scenario" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>SQL PL function&lt;/name>&#xa;     &lt;description>Create SQL PL function and use it in the etl scenario. Use global variable&lt;/description>&#xa;     &lt;script>sqlpl_function&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.db2.Db2Driver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;&#xa;     &lt;beforetasks>&#xa;           &lt;task>&#xa;              &lt;name>create_global_var&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;!-- create global variable -->&#xa;              &lt;sql>&#xa;                  CREATE VARIABLE vVAL INTEGER default 0;&#xa;              &lt;/sql>&#xa;              &lt;onexception action=&quot;ignore&quot;/>&#xa;           &lt;/task>       &#xa;     &lt;/beforetasks>&#xa;     &#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination type=&quot;function&quot;>&#xa;               &lt;name>to_value&lt;/name>&#xa;               &lt;load>&#xa;                    &lt;sql>&#xa;                       CREATE OR REPLACE FUNCTION to_value(v_value INT) RETURNS CHAR(6)&#xa;                       BEGIN&#xa;                          RETURN to_char(v_value);&#xa;                       END&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_function&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                    &lt;variables>&#xa;                         &lt;!-- this is a global variable so it doesn't need to be declared --> &#xa;                         &lt;VAL declare=&quot;false&quot; sql=&quot;set {VAL} = {VAL} + 1;&quot; include=&quot;false&quot; />&#xa;                         &lt;EMPNO sql=&quot;set {EMPNO} = to_value({VAL});&quot; />&#xa;                    &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&#xa;     &lt;aftertasks>&#xa;           &lt;task>&#xa;              &lt;name>drop_global_var&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;!-- drop global variable -->&#xa;              &lt;sql>&#xa;                  DROP VARIABLE vVAL;&#xa;              &lt;/sql>&#xa;           &lt;/task>       &#xa;     &lt;/aftertasks>&#xa;     &#xa;&lt;/scenario>"
                    name="Create SQL PL function and use it in the etl scenario. Use DB2 global variable" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Db2 cursor&lt;/name>&#xa;     &lt;description>Use Db2 cursors in the etl scenario&lt;/description>&#xa;     &lt;script>db2_cursor&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.db2.Db2Driver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>trunk_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   TRUNCATE TABLE employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>&#xa;          &lt;/task>&#xa;     &lt;/tasks>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination scope=&quot;single&quot;>&#xa;               &lt;name>employee_stage&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor sql=&quot;select * from employee_stage&quot;/>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor_table&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Use Db2 cursors in the etl scenario" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Db2 Exatrct and Load&lt;/name>&#xa;     &lt;description>Db2 Extract and Load using ADMIN_CMD stored procedure&lt;/description>&#xa;     &lt;script>db2_admin_cmd&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.db2.Db2Driver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>drop_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   DROP TABLE employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>create_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   create TABLE employee_stage&#xa;                   (&#xa;                     EMPNO&#x9;CHAR(6)&#x9;not null,&#xa;                     FIRSTNME&#x9;VARCHAR(12)&#x9;not null,&#xa;                     MIDINIT&#x9;CHAR(1),&#xa;                     LASTNAME&#x9;VARCHAR(15)&#x9;not null,&#xa;                     WORKDEPT&#x9;CHAR(3),&#x9;&#xa;                     PHONENO&#x9;CHAR(4),&#x9;&#xa;                     HIREDATE&#x9;DATE,&#x9;&#xa;                     JOB&#x9;CHAR(8)&#x9;&#xa;                   );&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>extract&lt;/name>&#xa;               &lt;connection>source&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   CALL SYSPROC.ADMIN_CMD ('EXPORT to {DATA_FOLDER}emp.txt OF DEL MESSAGES ON SERVER select EMPNO,FIRSTNME,MIDINIT,LASTNAME,WORKDEPT,PHONENO,HIREDATE,JOB from employee');&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>load&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   CALL SYSPROC.ADMIN_CMD ('IMPORT from {DATA_FOLDER}emp.txt OF DEL MESSAGES ON SERVER insert into employee_stage');&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;          &#xa;     &lt;/tasks>&#xa;     &#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_table&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Db2 Extract and Load using ADMIN_CMD stored procedure" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;!-- Merge in this example does not work with generic jdbc etl driver -->&#xa;&lt;scenario>&#xa;     &lt;name>Db2 merge, update, delete&lt;/name>&#xa;     &lt;description>Db2 merge, update, delete&lt;/description>&#xa;     &lt;script>db2_merge_data&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;driver>com.toolsverse.etl.driver.db2.Db2Driver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_upsert&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>delete&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;delete&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;condition>{SEX} = 'M'&lt;/condition>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>update&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;update&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;set {SEX} = 'U';&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>merge&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;merge&quot; key=&quot;EMPNO&quot; > &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;if {SEX} = 'M' then &#xa;                                     set {SEX} = 'I'; &#xa;                                 else &#xa;                                     set {SEX} = 'U'; &#xa;                                 end if;&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;          &#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Db2 merge, update, delete" type="1"/>
            </nodes>
        </node>
        <node name="MySql" type="0">
            <nodes>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Move data&lt;/name>&#xa;     &lt;description>Moves blobs, clobs and other types of data. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.mysql.MySqlDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                  &lt;!-- the source is a varchar(...) so need to define type as MySql LONGTEXT -->&#xa;                  &lt;variables>&#xa;                      &lt;RESUME nativetype=&quot;LONGTEXT&quot; sqltype=&quot;2005&quot; />&#xa;                  &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Move blobs, clobs and other types of data. Create tables if needed." type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>MySql getPk and getFk&lt;/name>&#xa;     &lt;description>Get new column value using MySql autoincrement column and keep referential integrity&lt;/description>&#xa;     &lt;script>myql_keys&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow> &#xa;     &lt;driver>com.toolsverse.etl.driver.mysql.MySqlDriver&lt;/driver>&#xa;&#xa;     &lt;tasks>&#xa;           &lt;task>&#xa;              &lt;name>drop_table&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;sql>&#xa;                  drop table config_property_test;&#xa;              &lt;/sql>&#xa;              &lt;onexception action=&quot;ignore&quot;/>&#xa;           &lt;/task>     &#xa;&#xa;     &#xa;           &lt;task>&#xa;              &lt;name>create_table&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;sql>&#xa;                 create table config_property_test&#xa;                 (&#xa;                      CONFIG_PROPERTY_NUM&#x9;BIGINT&#x9;not null AUTO_INCREMENT,&#xa;                      NAME&#x9;VARCHAR(255),&#xa;                      DESCRIPTION&#x9;VARCHAR(255),&#x9;&#xa;                      DEFAULT_VALUE&#x9;VARCHAR(255),&#xa;                      CFG_PROP_NUM BIGINT,&#xa;                      primary key (CONFIG_PROPERTY_NUM)&#xa;                 )      &#xa;              &lt;/sql>&#xa;           &lt;/task>     &#xa;      &lt;/tasks>      &#xa;&#xa;     &#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>config_property&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property.*, config_property_num as config_num, config_property_num as cfg_prop_num from config_property&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property_num as con_prop_num, value from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>config_property_test&lt;/name>&#xa;               &lt;source>config_property&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_NUM include=&quot;false&quot; />&#xa;                       &lt;!-- get value using auto increment -->&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getPk&quot; />&#xa;                       &lt;!-- get value using sql -->&#xa;                       &lt;CFG_PROP_NUM function=&quot;getPk&quot; sql=&quot;{CONFIG_NUM} + 1000&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>config_value_test&lt;/name>&#xa;               &lt;source>config_value&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getFk&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- map CON_PROP_NUM to CFG_PROP_NUM -->&#xa;                       &lt;CON_PROP_NUM function=&quot;getFk&quot; field=&quot;CFG_PROP_NUM&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Get new column value using MySql autoincrement column and keep referential integrity" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>MySql procedural language in the etl scenario&lt;/name>&#xa;     &lt;description>MySql procedural language in the etl scenario&lt;/description>&#xa;     &lt;script>mysqllang&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.mysql.MySqlDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_mysql&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;EMPNO /> &#xa;                       &lt;!-- any myssql code allowed here, not just variable assigmnet --> &#xa;                       &lt;TEST type=&quot;DATE&quot; sql=&quot;set {TEST} = SYSDATE();&quot; /> &#xa;                       &lt;FIRSTNME />&#xa;                       &lt;MIDINIT />&#xa;                       &lt;LASTNAME />&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;sql>&#xa;                       if {SEX} = 'M' then&#xa;                           insert into employee_mysql (EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX)&#xa;                           values ({EMPNO},{FIRSTNME},{MIDINIT},{LASTNAME},{TEST},'M');&#xa;                       end if;&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="MySql procedural language in the etl scenario " type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>MySql function&lt;/name>&#xa;     &lt;description>Create MySql function and use it in the etl scenario. Use global variable&lt;/description>&#xa;     &lt;script>mysql_function&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.mysql.MySqlDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;!-- define global variable -->&#xa;     &lt;variables>&#xa;        &lt;COUNTER value=&quot;0&quot; />&#xa;     &lt;/variables>        &#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination type=&quot;function&quot;>&#xa;               &lt;name>to_value&lt;/name>&#xa;               &lt;load>&#xa;                    &lt;sql>&#xa;                       CREATE FUNCTION to_value(v_value INT) RETURNS CHAR(6)&#xa;                       BEGIN&#xa;                          RETURN CAST(v_value AS char);&#xa;                       END;&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_function&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                    &lt;variables>&#xa;                         &lt;!-- get value from the global variable using javascript -->&#xa;                         &lt;VAL type=&quot;int&quot; code=&quot;var value;&#xa;                                    var counterVar = destination.getScenarioVariables().get('COUNTER'); &#xa;                                    var val = (parseInt(counterVar.getValue()) + 1) | 0;&#xa;                                    counterVar.setValue(val.toString());&#xa;                                    value = val.toString();&quot;&#xa;                                    include=&quot;false&quot; lang=&quot;JavaScript&quot; />                     &#xa;                         &lt;EMPNO sql=&quot;set {EMPNO} = to_value({VAL});&quot; />&#xa;                    &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Create MySql function and use it in the etl scenario. Use Scenario global variable" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>MySql cursor&lt;/name>&#xa;     &lt;description>Use MySql cursors in the etl scenario&lt;/description>&#xa;     &lt;script>mysql_cursor&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.mysql.MySqlDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>trunk_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   TRUNCATE TABLE employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>&#xa;          &lt;/task>&#xa;     &lt;/tasks>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination scope=&quot;single&quot;>&#xa;               &lt;name>employee_stage&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor sql=&quot;select * from employee_stage&quot;/>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor_table&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Use MySql cursors in the etl scenario" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>MySql Exatrct and Load&lt;/name>&#xa;     &lt;description>MySql Extract using select INTO OUTFILE and Load using LOAD DATA&lt;/description>&#xa;     &lt;script>mysql_extract_load&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.mysql.MySqlDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>drop_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   DROP TABLE employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>               &#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>del_file&lt;/name>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.FileManagerTask&lt;/class>&#xa;               &lt;variables>&#xa;                    &lt;COMMAND value=&quot;delete&quot;/>&#xa;                    &lt;FILES value=&quot;emp.txt&quot;/>&#xa;                    &lt;SOURCE_FOLDER value=&quot;{DATA_FOLDER}&quot;/>&#xa;               &lt;/variables>&#xa;          &lt;/task>          &#xa;&#xa;          &lt;task>&#xa;               &lt;name>create_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   create TABLE employee_stage&#xa;                   (&#xa;                     EMPNO&#x9;CHAR(6)&#x9;not null,&#xa;                     FIRSTNME&#x9;VARCHAR(12)&#x9;not null,&#xa;                     MIDINIT&#x9;CHAR(1),&#xa;                     LASTNAME&#x9;VARCHAR(15)&#x9;not null,&#xa;                     WORKDEPT&#x9;CHAR(3),&#x9;&#xa;                     PHONENO&#x9;CHAR(4),&#x9;&#xa;                     HIREDATE&#x9;DATE,&#x9;&#xa;                     JOB&#x9;CHAR(8)&#x9;&#xa;                   );&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>extract&lt;/name>&#xa;               &lt;connection>source&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   select EMPNO,FIRSTNME,MIDINIT,LASTNAME,WORKDEPT,PHONENO,HIREDATE,JOB from employee INTO OUTFILE '{DATA_FOLDER}emp.txt'&#xa;                   FIELDS TERMINATED BY ';'; &#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>load&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   LOAD DATA INFILE '{DATA_FOLDER}emp.txt' INTO TABLE employee_stage&#xa;                   FIELDS TERMINATED BY ';';&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;          &#xa;     &lt;/tasks>&#xa;     &#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_table&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="MySql Extract using select INTO OUTFILE and Load using LOAD DATA" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>MySql merge, update, delete&lt;/name>&#xa;     &lt;description>MySql merge, update, delete&lt;/description>&#xa;     &lt;script>mysql_merge_data&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;driver>com.toolsverse.etl.driver.mysql.MySqlDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_upsert&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>delete&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;delete&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;condition>{SEX} = 'M'&lt;/condition>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>update&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;update&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;set {SEX} = 'U';&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>merge&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;merge&quot; key=&quot;EMPNO&quot; > &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;if {SEX} = 'M' then &#xa;                                     set {SEX} = 'I'; &#xa;                                 else &#xa;                                     set {SEX} = 'U'; &#xa;                                 end if;&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;          &#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="MySql merge, update, delete" type="1"/>
            </nodes>
        </node>
        <node name="PostgreSQL" type="0">
            <nodes>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Move data&lt;/name>&#xa;     &lt;description>Moves blobs, clobs and other types of data. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.postgres.PostgresDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                  &lt;!-- the source is a varchar(...) so need to define type as PostgreSQL TEXT -->&#xa;                  &lt;variables>&#xa;                      &lt;RESUME nativetype=&quot;TEXT&quot; sqltype=&quot;2005&quot; />&#xa;                  &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Move blobs, clobs and other types of data. Create tables if needed." type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>PostgreSQL getPk and getFk&lt;/name>&#xa;     &lt;description>Get new primary key using PostgreSQL sequence and serial column and keep referential integrity&lt;/description>&#xa;     &lt;script>posgres_keys&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow> &#xa;     &lt;driver>com.toolsverse.etl.driver.postgres.PostgresDriver&lt;/driver>&#xa;&#xa;     &lt;tasks>&#xa;           &lt;task>&#xa;              &lt;name>drop_table&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;sql>&#xa;                  drop table config_property_serial;&#xa;              &lt;/sql>&#xa;              &lt;onexception action=&quot;ignore&quot;/>&#xa;           &lt;/task>  &#xa;     &#xa;           &lt;task>&#xa;              &lt;name>create_table&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;sql>&#xa;                 create table config_property_serial&#xa;                 (&#xa;                      CP_NUM&#x9;SERIAL PRIMARY KEY,&#xa;                      NAME&#x9;VARCHAR(255),&#xa;                      DESCRIPTION&#x9;VARCHAR(255),&#x9;&#xa;                      DEFAULT_VALUE&#x9;VARCHAR(3000)&#x9;&#xa;                 )      &#xa;              &lt;/sql>&#xa;           &lt;/task>     &#xa;      &lt;/tasks>      &#xa;&#xa;     &#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>config_property&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property.*, config_property_num as cfg_prop_num from config_property&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>config_property_serial&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select CONFIG_PROPERTY_NUM as cp_num, name, description, default_value from config_property&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;          &lt;source>&#xa;               &lt;name>config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property_num as con_prop_num, value from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>          &#xa;&#xa;          &lt;source>&#xa;               &lt;name>config_value_serial&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property_num as cp_num, value from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>          &#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>config_property_serial&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- get value using serial field --> &#xa;                       &lt;CP_NUM type=&quot;INTEGER&quot; function=&quot;getSerial&quot; /> &lt;!-- CP_NUM must be SERIAL, need explicit type -->&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;     &#xa;          &lt;destination>&#xa;               &lt;name>config_property_test&lt;/name>&#xa;               &lt;source>config_property&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- get value using sequence -->&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getPk&quot; sequence=&quot;seq_config_property&quot; />&#xa;                       &lt;CFG_PROP_NUM include=&quot;false&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>config_property_two&lt;/name>&#xa;               &lt;source>config_property&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_PROPERTY_NUM include=&quot;false&quot; />&#xa;                       &lt;!-- get value using sql -->&#xa;                       &lt;CFG_PROP_NUM function=&quot;getPk&quot; sql=&quot;{CONFIG_PROPERTY_NUM} + 10000&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &#xa;          &lt;destination>&#xa;               &lt;name>config_value_test&lt;/name>&#xa;               &lt;source>config_value&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getFk&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- map CON_PROP_NUM to CONFIG_PROPERTY_NUM --> &#xa;                       &lt;CON_PROP_NUM function=&quot;getFk&quot; field=&quot;CFG_PROP_NUM&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>config_value_serial&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CP_NUM function=&quot;getFk&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Get new primary key using PostgreSQL sequence and serial column and keep referential integrity" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>PL/pgSQL in the etl scenario&lt;/name>&#xa;     &lt;description>PL/pgSQL in the etl scenario&lt;/description>&#xa;     &lt;script>pgsql&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.postgres.PostgresDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_pgsql&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;EMPNO /> &#xa;                       &lt;!-- any pgsql code allowed here, not just variable assigmnet --> &#xa;                       &lt;TEST type=&quot;DATE&quot; sql=&quot;{TEST}:= NOW();&quot; /> &#xa;                       &lt;FIRSTNME />&#xa;                       &lt;MIDINIT />&#xa;                       &lt;LASTNAME />&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;sql>&#xa;                       if {SEX} = 'M' then&#xa;                           insert into employee_pgsql (EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX)&#xa;                           values ({EMPNO},{FIRSTNME},{MIDINIT},{LASTNAME},{TEST},'M');&#xa;                       end if;&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="PL/pgSQL in the etl scenario" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>pgSQL function&lt;/name>&#xa;     &lt;description>Create pgSQL function and use it in the etl scenario. Use global variable&lt;/description>&#xa;     &lt;script>pgsql_function&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.postgres.PostgresDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;!-- define global variable -->&#xa;     &lt;variables>&#xa;        &lt;COUNTER value=&quot;0&quot; />&#xa;     &lt;/variables>     &#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination type=&quot;function&quot;>&#xa;               &lt;name>to_value&lt;/name>&#xa;               &lt;objectname>to_value(v_value in integer)&lt;/objectname>&#xa;               &lt;load>&#xa;                    &lt;sql>&#xa;                        create or replace function to_value(v_value in integer) RETURNS CHAR&#xa;                        AS $$ &#xa;                        BEGIN&#xa;                           return to_char(v_value, 'FM999999');&#xa;                        END;$$ LANGUAGE plpgsql;&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_function&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                    &lt;variables>&#xa;                         &lt;!-- get value from the global variable using javascript -->&#xa;                         &lt;VAL type=&quot;integer&quot; code=&quot;var value;&#xa;                                    var counterVar = destination.getScenarioVariables().get('COUNTER'); &#xa;                                    var val = (parseInt(counterVar.getValue()) + 1) | 0;&#xa;                                    counterVar.setValue(val.toString());&#xa;                                    value = val.toString();&quot;&#xa;                                    include=&quot;false&quot; lang=&quot;JavaScript&quot; /> &#xa;                         &lt;EMPNO sql=&quot;{EMPNO}:= to_value({VAL});&quot; />&#xa;                    &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Create pgSQL function and use it in the etl scenario. Use Scenario global variable" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>PostgreSQL cursor&lt;/name>&#xa;     &lt;description>Use PostgreSQL cursors in the etl scenario&lt;/description>&#xa;     &lt;script>postgres_cursor&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.postgres.PostgresDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>trunk_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   TRUNCATE TABLE employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>&#xa;          &lt;/task>&#xa;     &lt;/tasks>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination scope=&quot;single&quot;>&#xa;               &lt;name>employee_stage&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor sql=&quot;select * from employee_stage&quot;/>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor_table&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Use PostgreSQL cursors in the etl scenario" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>PostgreSQL Exatrct and Load&lt;/name>&#xa;     &lt;description>PostgreSQL Extract and Load using COPY&lt;/description>&#xa;     &lt;script>postgres_extract_load&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.postgres.PostgresDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>drop_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   DROP TABLE employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>               &#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>create_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   create TABLE employee_stage&#xa;                   (&#xa;                     EMPNO&#x9;CHAR(6)&#x9;not null,&#xa;                     FIRSTNME&#x9;VARCHAR(12)&#x9;not null,&#xa;                     MIDINIT&#x9;CHAR(1),&#xa;                     LASTNAME&#x9;VARCHAR(15)&#x9;not null,&#xa;                     WORKDEPT&#x9;CHAR(3),&#x9;&#xa;                     PHONENO&#x9;CHAR(4),&#x9;&#xa;                     HIREDATE&#x9;DATE,&#x9;&#xa;                     JOB&#x9;CHAR(8)&#x9;&#xa;                   );&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>extract&lt;/name>&#xa;               &lt;connection>source&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   COPY (select EMPNO,FIRSTNME,MIDINIT,LASTNAME,WORKDEPT,PHONENO,HIREDATE,JOB from employee) TO '{DATA_FOLDER}emp.txt' WITH DELIMITER ';';&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>load&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   copy employee_stage from '{DATA_FOLDER}emp.txt' WITH DELIMITER ';';&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;          &#xa;     &lt;/tasks>&#xa;     &#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_table&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="PostgreSQL Extract and Load using COPY" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>PostgreSQL merge, update, delete&lt;/name>&#xa;     &lt;description>PostgreSQL merge, update, delete&lt;/description>&#xa;     &lt;script>postgres_merge_data&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;driver>com.toolsverse.etl.driver.postgres.PostgresDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_upsert&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>delete&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;delete&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;condition>{SEX} = 'M'&lt;/condition>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>update&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;update&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;{SEX}:= 'U';&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>merge&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;merge&quot; key=&quot;EMPNO&quot; > &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;if {SEX} = 'M' then &#xa;                                     {SEX}:= 'I'; &#xa;                                 else &#xa;                                     {SEX}:= 'U'; &#xa;                                 end if;&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;          &#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="PostgreSQL merge, update, delete" type="1"/>
            </nodes>
        </node>
        <node name="MS SQL Server" type="0">
            <nodes>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Move data&lt;/name>&#xa;     &lt;description>Moves blobs, clobs and other types of data. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.MsSqlDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                  &lt;!-- the source is a varchar(...) so need to define type as Ms Sql VARCHAR(max) -->&#xa;                  &lt;variables>&#xa;                      &lt;RESUME nativetype=&quot;VARCHAR(max)&quot; sqltype=&quot;2005&quot; />&#xa;                  &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Move blobs, clobs and other types of data. Create tables if needed" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Ms Sql getPk and getFk&lt;/name>&#xa;     &lt;description>Get new column value using Ms Sql autoincrement and SQL and keep referential integrity&lt;/description>&#xa;     &lt;script>mssql_keys&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow> &#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.MsSqlDriver&lt;/driver>&#xa;&#xa;     &lt;tasks>&#xa;           &lt;task>&#xa;              &lt;name>drop_table&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;sql>&#xa;                  drop table config_property_test;&#xa;              &lt;/sql>&#xa;              &lt;onexception action=&quot;ignore&quot;/>&#xa;           &lt;/task>     &#xa;&#xa;     &#xa;           &lt;task>&#xa;              &lt;name>create_table&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;sql>&#xa;                 create table config_property_test&#xa;                 (&#xa;                      CONFIG_PROPERTY_NUM INT PRIMARY KEY IDENTITY,&#xa;                      NAME&#x9;VARCHAR(255),&#xa;                      DESCRIPTION&#x9;VARCHAR(255),&#x9;&#xa;                      DEFAULT_VALUE&#x9;VARCHAR(255),&#xa;                      CFG_PROP_NUM INT&#xa;                 )      &#xa;              &lt;/sql>&#xa;           &lt;/task>     &#xa;      &lt;/tasks>      &#xa;&#xa;     &#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>config_property&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property.*, config_property_num as config_num, config_property_num as cfg_prop_num from config_property&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property_num as con_prop_num, value from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>config_property_test&lt;/name>&#xa;               &lt;source>config_property&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_NUM include=&quot;false&quot; />&#xa;                       &lt;!-- get value using auto increment -->&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getAutoInc&quot; />&#xa;                       &lt;!-- get value using sql -->&#xa;                       &lt;CFG_PROP_NUM function=&quot;getPk&quot; sql=&quot;{CONFIG_NUM} + 1000&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>config_value_test&lt;/name>&#xa;               &lt;source>config_value&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getFk&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- map CONFIG_PROP_NUM to CFG_PROP_NUM -->  &#xa;                       &lt;CON_PROP_NUM function=&quot;getFk&quot; field=&quot;CFG_PROP_NUM&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Get new column value using Ms Sql autoincrement and SQL and keep referential integrity" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>TransactSQL in the etl scenario&lt;/name>&#xa;     &lt;description>TransactSQL in the etl scenario&lt;/description>&#xa;     &lt;script>transsql&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.MsSqlDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_transsql&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;EMPNO /> &#xa;                       &lt;!-- any TransactSQL code allowed here, not just variable assigmnet --> &#xa;                       &lt;TEST type=&quot;DATE&quot; sql=&quot;set {TEST} = GETDATE();&quot; /> &#xa;                       &lt;FIRSTNME />&#xa;                       &lt;MIDINIT />&#xa;                       &lt;LASTNAME />&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;sql>&#xa;                       if {SEX} = 'M' &#xa;                           insert into employee_transsql (EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX)&#xa;                           values ({EMPNO},{FIRSTNME},{MIDINIT},{LASTNAME},{TEST},'M');&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="TransactSQL in the etl scenario" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>TransactSQL function&lt;/name>&#xa;     &lt;description>Create TransactSQL function and use it in the etl scenario. Use global variable.&lt;/description>&#xa;     &lt;script>trans_function&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.MsSqlDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;!-- define global variable -->&#xa;     &lt;variables>&#xa;        &lt;COUNTER value=&quot;0&quot; />&#xa;     &lt;/variables>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination type=&quot;function&quot;>&#xa;               &lt;name>to_value&lt;/name>&#xa;               &lt;load>&#xa;                    &lt;sql>&#xa;                        create function to_value(@v_value int) RETURNS CHAR(6)&#xa;                        AS  &#xa;                        BEGIN&#xa;                           return CAST(@v_value as char(6));&#xa;                        END;&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_function&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                    &lt;variables>&#xa;                         &lt;!-- get value from the global variable using javascript -->&#xa;                         &lt;VAL type=&quot;int&quot; code=&quot;var value;&#xa;                                    var counterVar = destination.getScenarioVariables().get('COUNTER'); &#xa;                                    var val = parseInt(counterVar.getValue()) + 1;;&#xa;                                    counterVar.setValue(val.toString());&#xa;                                    value = val;&quot;&#xa;                                    include=&quot;false&quot; lang=&quot;JavaScript&quot; /> &#xa;                         &lt;EMPNO sql=&quot;set {EMPNO} = dbo.to_value({VAL});&quot; />&#xa;                    &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Create TransactSQL function and use it in the etl scenario. Use Scenario global variable" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Ms Sql cursor&lt;/name>&#xa;     &lt;description>Use Ms Sql cursors in the etl scenario&lt;/description>&#xa;     &lt;script>mssql_cursor&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.MsSqlDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>trunk_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   TRUNCATE TABLE employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>&#xa;          &lt;/task>&#xa;     &lt;/tasks>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination scope=&quot;single&quot;>&#xa;               &lt;name>employee_stage&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor sql=&quot;select * from employee_stage&quot;/>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor_table&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Use Ms Sql cursors in the etl scenario" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Ms Sql Exatrct and Load&lt;/name>&#xa;     &lt;description>Ms Sql Extract using bcp and Load using bulk insert and bcp&lt;/description>&#xa;     &lt;script>mssql_extract_load&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.MsSqlDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>drop_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   DROP TABLE employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>               &#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>create_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   create TABLE employee_stage&#xa;                   (&#xa;                     EMPNO&#x9;CHAR(6)&#x9;not null,&#xa;                     FIRSTNME&#x9;VARCHAR(12)&#x9;not null,&#xa;                     MIDINIT&#x9;CHAR(1),&#xa;                     LASTNAME&#x9;VARCHAR(15)&#x9;not null,&#xa;                     WORKDEPT&#x9;CHAR(3),&#x9;&#xa;                     PHONENO&#x9;CHAR(4),&#x9;&#xa;                     HIREDATE&#x9;DATE,&#x9;&#xa;                     JOB&#x9;CHAR(8)&#x9;&#xa;                   );&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>drop_staging_table_two&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   DROP TABLE employee_stage_two;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>               &#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>create_staging_table_two&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   create TABLE employee_stage_two&#xa;                   (&#xa;                     EMPNO&#x9;CHAR(6)&#x9;not null,&#xa;                     FIRSTNME&#x9;VARCHAR(12)&#x9;not null,&#xa;                     MIDINIT&#x9;CHAR(1),&#xa;                     LASTNAME&#x9;VARCHAR(15)&#x9;not null,&#xa;                     WORKDEPT&#x9;CHAR(3),&#x9;&#xa;                     PHONENO&#x9;CHAR(4),&#x9;&#xa;                     HIREDATE&#x9;DATE,&#x9;&#xa;                     JOB&#x9;CHAR(8)&#x9;&#xa;                   );&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;          &#xa;&#xa;          &lt;!-- extract using bcp --> &#xa;          &lt;task>&#xa;               &lt;name>extract&lt;/name>&#xa;               &lt;connection>source&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.sqlserver.MsSqlExtractTask&lt;/class>&#xa;               &lt;sql>&#xa;                   select EMPNO,FIRSTNME,MIDINIT,LASTNAME,WORKDEPT,PHONENO,HIREDATE,JOB from employee&#xa;               &lt;/sql>&#xa;               &lt;variables>&#xa;                   &lt;DATA_FILENAME value=&quot;{DATA_FOLDER}emp.dat&quot; />&#xa;                   &lt;DELIMETER value=&quot;;&quot; />&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;&#xa;          &lt;!-- extract using bcp --> &#xa;          &lt;task>&#xa;               &lt;name>extract_two&lt;/name>&#xa;               &lt;connection>source&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.sqlserver.MsSqlExtractTask&lt;/class>&#xa;               &lt;sql>&#xa;                   select EMPNO,FIRSTNME,MIDINIT,LASTNAME,WORKDEPT,PHONENO,HIREDATE,JOB from employee&#xa;               &lt;/sql>&#xa;               &lt;variables>&#xa;                   &lt;DATA_FILENAME value=&quot;{DATA_FOLDER}emp2.dat&quot; />&#xa;                   &lt;DELIMETER value=&quot;;&quot; />&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &#xa;          &lt;!-- load using bulk insert --> &#xa;          &lt;task>&#xa;               &lt;name>load&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   BULK INSERT employee_stage &#xa;                   FROM '{DATA_FOLDER}emp.dat'                      &#xa;                   WITH &#xa;                   ( &#xa;                      FIELDTERMINATOR = ';', &#xa;                      FIRSTROW = 1&#xa;                   );&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;!-- load using bcp --> &#xa;          &lt;task>&#xa;               &lt;name>load_two&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.sqlserver.MsSqlLoadTask&lt;/class>&#xa;               &lt;sql>employee_stage_two&lt;/sql>&#xa;               &lt;variables>&#xa;                   &lt;DATA_FILENAME value=&quot;{DATA_FOLDER}emp2.dat&quot; />&#xa;                   &lt;DELIMETER value=&quot;;&quot; />&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &#xa;          &#xa;     &lt;/tasks>&#xa;     &#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_table&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>employee_table_two&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage_two&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Ms Sql Extract using bcp and Load using bulk insert and bcp" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Ms SQL merge, update, delete&lt;/name>&#xa;     &lt;description>Ms SQL merge, update, delete&lt;/description>&#xa;     &lt;script>mssql_merge_data&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.MsSqlDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_upsert&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>delete&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;delete&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;condition>{SEX} = 'M'&lt;/condition>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>update&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;update&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;set {SEX} = 'U';&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>merge&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;merge&quot; key=&quot;EMPNO&quot; > &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;if {SEX} = 'M' &#xa;                                     set {SEX} = 'I'; &#xa;                                 else &#xa;                                     set {SEX} = 'U'; &#xa;                                 &quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;          &#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Ms Sql merge, update, delete" type="1"/>
            </nodes>
        </node>
        <node name="Sybase SQL Server" type="0">
            <nodes>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Move data&lt;/name>&#xa;     &lt;description>Moves blobs, clobs and other types of data. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.SybaseDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                  &lt;!-- the source is a varchar(...) so need to define type as Sybase TEXT -->&#xa;                  &lt;variables>&#xa;                      &lt;RESUME nativetype=&quot;TEXT&quot; sqltype=&quot;2005&quot; />&#xa;                  &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Move blobs, clobs and other types of data. Create tables if needed." type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Sybase getPk and getFk&lt;/name>&#xa;     &lt;description>Get new column value using Sybase autoincrement and SQL and keep referential integrity&lt;/description>&#xa;     &lt;script>sybase_keys&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow> &#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.SybaseDriver&lt;/driver>&#xa;&#xa;     &lt;tasks>&#xa;           &lt;task>&#xa;              &lt;name>drop_table&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;sql>&#xa;                  drop table config_property_test;&#xa;              &lt;/sql>&#xa;              &lt;onexception action=&quot;ignore&quot;/>&#xa;           &lt;/task>     &#xa;&#xa;     &#xa;           &lt;task>&#xa;              &lt;name>create_table&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;sql>&#xa;                 create table CONFIG_PROPERTY_TEST&#xa;                 (&#xa;                      CONFIG_PROPERTY_NUM numeric(8,0) IDENTITY,&#xa;                      NAME&#x9;VARCHAR(255) null,&#xa;                      DESCRIPTION&#x9;VARCHAR(255) null,&#x9;&#xa;                      DEFAULT_VALUE&#x9;VARCHAR(255) null,&#xa;                      CFG_PROP_NUM INT null&#xa;                 )      &#xa;              &lt;/sql>&#xa;           &lt;/task>     &#xa;      &lt;/tasks>      &#xa;&#xa;     &#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>config_property&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property.*, config_property_num as config_num, config_property_num as cfg_prop_num from config_property&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property_num as con_prop_num, value from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>config_property_test&lt;/name>&#xa;               &lt;source>config_property&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_NUM include=&quot;false&quot; />&#xa;                       &lt;!-- get value using auto increment -->&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getAutoInc&quot; />&#xa;                       &lt;!-- get value using sql -->&#xa;                       &lt;CFG_PROP_NUM function=&quot;getPk&quot; sql=&quot;{CONFIG_NUM} + 1000&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>config_value_test&lt;/name>&#xa;               &lt;source>config_value&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getFk&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- map CONFIG_PROP_NUM to CFG_PROP_NUM -->  &#xa;                       &lt;CON_PROP_NUM function=&quot;getFk&quot; field=&quot;CFG_PROP_NUM&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Get new column value using Sybase autoincrement and SQL and keep referential integrity" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Sybase TSQL in the etl scenario&lt;/name>&#xa;     &lt;description>Sybase TSQL in the etl scenario&lt;/description>&#xa;     &lt;script>tsql&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.SybaseDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_transsql&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;EMPNO /> &#xa;                       &lt;!-- any TSQL code allowed here, not just variable assigmnet --> &#xa;                       &lt;TEST type=&quot;DATE&quot; sql=&quot;select {TEST} = GETDATE()&quot; /> &#xa;                       &lt;FIRSTNME />&#xa;                       &lt;MIDINIT />&#xa;                       &lt;LASTNAME />&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;sql>&#xa;                       if {SEX} = 'M' &#xa;                           insert into employee_transsql (EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX)&#xa;                           values ({EMPNO},{FIRSTNME},{MIDINIT},{LASTNAME},{TEST},'M')&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Sybase TSQL in the etl scenario" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>TSQL function&lt;/name>&#xa;     &lt;description>Create TSQL function and use it in the etl scenario. Use global variable&lt;/description>&#xa;     &lt;script>t_function&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.SybaseDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination type=&quot;function&quot;>&#xa;               &lt;name>to_value&lt;/name>&#xa;               &lt;!-- this is required for sybase becasue identifiers are case sencetive -->&#xa;               &lt;objectname>to_value&lt;/objectname>&#xa;               &lt;load>&#xa;                    &lt;sql>&#xa;                        create function to_value(@v_value int) RETURNS CHAR(6)&#xa;                        AS  &#xa;                        BEGIN&#xa;                           return CAST(@v_value as char(6))&#xa;                        END&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>init_global_var&lt;/name>&#xa;               &lt;!-- initializes global varibale -->&#xa;               &lt;load>&#xa;                   &lt;sql>select @v_dummy = set_appcontext('t_function','val','0')&lt;/sql>&#xa;               &lt;/load>     &#xa;          &lt;/destination>     &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_function&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                    &lt;variables>&#xa;                         &lt;!-- gets global variable value from the app context -->&#xa;                         &lt;VAL type=&quot;int&quot; sql=&quot;select {VAL} = CAST(get_appcontext('t_function','val') as int) + 1 &#xa;                                              select @v_dummy = rm_appcontext('t_function','val')&#xa;                                              select @v_dummy = set_appcontext('t_function','val',CAST({VAL} as char(30)))&quot; &#xa;                                              include=&quot;false&quot;  />&#xa;                         &lt;EMPNO sql=&quot;select {EMPNO} = dbo.to_value({VAL})&quot; />&#xa;                    &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Create TSQL function and use it in the etl scenario. Use Sybase app_context" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Sybase cursor&lt;/name>&#xa;     &lt;description>Use Sybase cursors in the etl scenario&lt;/description>&#xa;     &lt;script>sybase_cursor&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.SybaseDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>trunk_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   delete from employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>&#xa;          &lt;/task>&#xa;     &lt;/tasks>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination scope=&quot;single&quot;>&#xa;               &lt;name>employee_stage&lt;/name>&#xa;               &lt;!-- this is required for sybase becasue identifiers are case sencetive -->&#xa;               &lt;tablename>employee_stage&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor&lt;/name>&#xa;               &lt;!-- this is required for sybase becasue identifiers are case sencetive -->&#xa;               &lt;tablename>employee_cursor&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor sql=&quot;select * from employee_stage&quot;/>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor_table&lt;/name>&#xa;               &lt;!-- this is required for sybase becasue identifiers are case sencetive -->&#xa;               &lt;tablename>employee_cursor_table&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Use Sybase cursors in the etl scenario" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Sybase Extract and Load&lt;/name>&#xa;     &lt;description>Sybase Extract and load using bcp&lt;/description>&#xa;     &lt;script>sybase_extract_load&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.SybaseDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>drop_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   DROP TABLE employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>               &#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>create_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                 CREATE TABLE employee_stage&#xa;                 (&#xa;                   EMPNO char(6) NOT NULL,&#xa;                   FIRSTNME varchar(12) NOT NULL,&#xa;                   MIDINIT char(1),&#xa;                   LASTNAME varchar(15) NOT NULL,&#xa;                   WORKDEPT char(3),&#xa;                   PHONENO char(4),&#xa;                   HIREDATE datetime,&#xa;                   JOB char(8),&#xa;                   EDLEVEL smallint NOT NULL,&#xa;                   SEX char(1),&#xa;                   BIRTHDATE datetime,&#xa;                   SALARY numeric(9,2),&#xa;                   BONUS numeric(9,2),&#xa;                   COMM numeric(9,2)&#xa;                  )               &#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;!-- extract using bcp --> &#xa;          &lt;task>&#xa;               &lt;name>extract&lt;/name>&#xa;               &lt;connection>source&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.sqlserver.SybaseExtractTask&lt;/class>&#xa;               &lt;!-- full table name is required. Cannot uses sql statement -->&#xa;               &lt;sql>&#xa;                   test.dbo.EMPLOYEE&#xa;               &lt;/sql>&#xa;               &lt;variables>&#xa;                   &lt;DATA_FILENAME value=&quot;{DATA_FOLDER}emp.dat&quot; />&#xa;                   &lt;DELIMETER value=&quot;;&quot; />&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;&#xa;          &lt;!-- load using bcp --> &#xa;          &lt;task>&#xa;               &lt;name>load&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.sqlserver.SybaseLoadTask&lt;/class>&#xa;               &lt;sql>test.dbo.employee_stage&lt;/sql>&#xa;               &lt;variables>&#xa;                   &lt;DATA_FILENAME value=&quot;{DATA_FOLDER}emp.dat&quot; />&#xa;                   &lt;DELIMETER value=&quot;;&quot; />&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &#xa;          &#xa;     &lt;/tasks>&#xa;     &#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_table&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Sybase Extract and load using bcp" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Sybase merge, update, delete&lt;/name>&#xa;     &lt;description>Sybase, merge, update, delete&lt;/description>&#xa;     &lt;script>sybase_merge_data&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;driver>com.toolsverse.etl.driver.sqlserver.SybaseDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_upsert&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>delete&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;delete&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;condition>{SEX} = 'M'&lt;/condition>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>update&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;update&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;select {SEX} = 'U'&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>merge&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;merge&quot; key=&quot;EMPNO&quot; > &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;if {SEX} = 'M' &#xa;                                     select {SEX} = 'I'&#xa;                                 else &#xa;                                     select {SEX} = 'U'&#xa;                                 &quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;          &#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Sybase, merge, update, delete" type="1"/>
            </nodes>
        </node>
        <node name="Informix" type="0">
            <nodes>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Move data&lt;/name>&#xa;     &lt;description>Moves blobs, clobs and other types of data. Creates tables if needed.&lt;/description>&#xa;     &lt;script>move_data&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.informix.InformixDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_resume&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;          &lt;source>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from emp_photo&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>emp_resume&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                  &lt;!-- the source is a varchar(...) so need to define type as informix CLOB -->&#xa;                  &lt;variables>&#xa;                      &lt;RESUME nativetype=&quot;CLOB&quot; />&#xa;                  &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &#xa;          &lt;destination>&#xa;               &lt;name>emp_photo&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Move blobs, clobs and other types of data. Create tables if needed" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Informix getPk getSeq and getFk&lt;/name>&#xa;     &lt;description>Get new column value using Informix serial column and sequence and keep referential integrity&lt;/description>&#xa;     &lt;script>informix_keys&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow> &#xa;     &lt;driver>com.toolsverse.etl.driver.informix.InformixDriver&lt;/driver>&#xa;&#xa;     &lt;tasks>&#xa;           &lt;task>&#xa;              &lt;name>drop_table&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;sql>&#xa;                  drop table config_property_test;&#xa;              &lt;/sql>&#xa;              &lt;onexception action=&quot;ignore&quot;/>&#xa;           &lt;/task>  &#xa;&#xa;     &#xa;           &lt;task>&#xa;              &lt;name>create_table&lt;/name>&#xa;              &lt;connection>dest&lt;/connection> &#xa;              &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;              &lt;sql>&#xa;                 create table config_property_test&#xa;                 (&#xa;                      CONFIG_PROPERTY_NUM&#x9;INTEGER&#x9;not null,&#xa;                      NAME&#x9;VARCHAR(255),&#xa;                      DESCRIPTION&#x9;VARCHAR(255),&#x9;&#xa;                      DEFAULT_VALUE&#x9;LVARCHAR(3000),&#x9;&#xa;                      CFG_PROP_NUM&#x9;SERIAL NOT NULL,&#xa;                      CONFIG_NUM&#x9;INTEGER&#x9;not null&#xa;                 )      &#xa;              &lt;/sql>&#xa;           &lt;/task>     &#xa;      &lt;/tasks>      &#xa;&#xa;     &#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>config_property&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property.*, config_property.config_property_num as cfg_prop_num, config_property.config_property_num as CONFIG_NUM &#xa;                         from config_property&#xa;                    &lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;          &lt;source>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select config_property_num as con_prop_num, value from config_value&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>          &#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>config_property_test&lt;/name>&#xa;               &lt;source>config_property&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- get value using autoincrement field --> &#xa;                       &lt;CFG_PROP_NUM type=&quot;INTEGER&quot; function=&quot;getSerial&quot; /> &lt;!-- CFG_PROP_NUM must be SERIAL -->&#xa;                       &lt;!-- get value using sequence --> &#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getPk&quot; sequence=&quot;sq_config_property&quot; />&#xa;                       &lt;!-- get value using sql --> &#xa;                       &lt;CONFIG_NUM function=&quot;getPk&quot; sql=&quot;{CFG_PROP_NUM} + 10000&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;          &lt;destination>&#xa;               &lt;name>config_value_test&lt;/name>&#xa;               &lt;source>config_value&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;CONFIG_PROPERTY_NUM function=&quot;getFk&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>second_config_value&lt;/name>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;!-- map CONFIG_PROP_NUM to CONFIG_NUM --> &#xa;                       &lt;CON_PROP_NUM type=&quot;INTEGER&quot; function=&quot;getFk&quot; field=&quot;CONFIG_NUM&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Get new column value using Informix serial column and sequence and keep referential integrity" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Informix SPL in the etl scenario&lt;/name>&#xa;     &lt;description>Informix SPL in the etl scenario. Use global variable&lt;/description>&#xa;     &lt;script>spl&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.informix.InformixDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_spl&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                   &lt;variables>&#xa;                       &lt;EMPNO /> &#xa;                       &lt;!-- any sql pl code allowed here, not just variable assigmnet --> &#xa;                       &lt;TEST type=&quot;DATE&quot; sql=&quot;let {TEST} = TODAY;&quot; /> &#xa;                       &lt;FIRSTNME />&#xa;                       &lt;MIDINIT />&#xa;                       &lt;LASTNAME />&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;sql>&#xa;                       if {SEX} = 'M' then&#xa;                           insert into employee_spl (EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX)&#xa;                           values ({EMPNO},{FIRSTNME},{MIDINIT},{LASTNAME},{TEST},'M');&#xa;                       end if;&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;&#xa;     &lt;/destinations>&#xa;&lt;/scenario>&#xa;" name="Informix SPL in the etl scenario" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Informix SPL function&lt;/name>&#xa;     &lt;description>Create SPL function and use it in the etl scenario. Use global variable&lt;/description>&#xa;     &lt;script>spl_function&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.informix.InformixDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;onsave action=&quot;save&quot;/>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,BIRTHDATE,SEX from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination type=&quot;function&quot;>&#xa;               &lt;name>to_value&lt;/name>&#xa;               &lt;load>&#xa;                    &lt;sql>&#xa;                       CREATE FUNCTION to_value(v_value int) RETURNING CHAR(6)&#xa;                           RETURN cast(v_value as char(6));&#xa;                       END FUNCTION;&#xa;                   &lt;/sql>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;tablename>employee_function&lt;/tablename>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;load>&#xa;                    &lt;variables>&#xa;                         &lt;!-- declare variable as global -->    &#xa;                         &lt;VAL declare=&quot;DEFINE GLOBAL&quot; type=&quot;int default 0&quot; sql=&quot;let {VAL} = {VAL} + 1;&quot; include=&quot;false&quot; />&#xa;                         &lt;EMPNO sql=&quot;let {EMPNO} = to_value({VAL});&quot; />&#xa;                    &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Create SPL function and use it in the etl scenario. Use Informix global variable" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Informix cursor&lt;/name>&#xa;     &lt;description>Use Informix cursors in the etl scenario&lt;/description>&#xa;     &lt;script>mssql_cursor&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.informix.InformixDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>trunk_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   drop table employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>&#xa;          &lt;/task>&#xa;     &lt;/tasks>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination scope=&quot;single&quot;>&#xa;               &lt;name>employee_stage&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor sql=&quot;select * from employee_stage&quot;/>&#xa;          &lt;/destination>&#xa;          &lt;destination>&#xa;               &lt;name>employee_cursor_table&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Use Informix cursors in the etl scenario" type="1"/>
                <node
                    code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Informix Exatrct and Load&lt;/name>&#xa;     &lt;description>Informix Extract and Load using DbAccess&lt;/description>&#xa;     &lt;script>informix_extract_load&lt;/script>&#xa;     &lt;driver>com.toolsverse.etl.driver.informix.InformixDriver&lt;/driver>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;tasks>&#xa;          &lt;!-- truncate staging table using destination connection, ignore exception if table doesn't exist -->&#xa;          &lt;task>&#xa;               &lt;name>drop_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   DROP TABLE employee_stage;&#xa;               &lt;/sql>&#xa;               &lt;onexception action=&quot;ignore&quot;/>               &#xa;          &lt;/task>&#xa;&#xa;          &lt;task>&#xa;               &lt;name>create_staging_table&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.common.SqlTask&lt;/class>&#xa;               &lt;sql>&#xa;                   create TABLE employee_stage&#xa;                   (&#xa;                     EMPNO&#x9;CHAR(6)&#x9;not null,&#xa;                     FIRSTNME&#x9;VARCHAR(12)&#x9;not null,&#xa;                     MIDINIT&#x9;CHAR(1),&#xa;                     LASTNAME&#x9;VARCHAR(15)&#x9;not null,&#xa;                     WORKDEPT&#x9;CHAR(3),&#x9;&#xa;                     PHONENO&#x9;CHAR(4),&#x9;&#xa;                     HIREDATE&#x9;datetime year to second,&#x9;&#xa;                     JOB&#x9;CHAR(8)&#x9;&#xa;                   );&#xa;               &lt;/sql>&#xa;          &lt;/task>&#xa;&#xa;          &lt;!-- extract using dbacess --> &#xa;          &lt;task>&#xa;               &lt;name>extract&lt;/name>&#xa;               &lt;connection>source&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.informix.InformixExtractTask&lt;/class>&#xa;               &lt;sql>select EMPNO,FIRSTNME,MIDINIT,LASTNAME,WORKDEPT,PHONENO,HIREDATE,JOB from employee&lt;/sql>&#xa;               &lt;variables>&#xa;                   &lt;DATA_FILENAME value=&quot;{DATA_FOLDER}emp.dat&quot; />&#xa;                   &lt;DELIMETER value=&quot;;&quot; />&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &#xa;          &lt;!-- load using dbaccess --> &#xa;          &lt;task>&#xa;               &lt;name>load&lt;/name>&#xa;               &lt;connection>dest&lt;/connection>&#xa;               &lt;class>com.toolsverse.etl.core.task.informix.InformixLoadTask&lt;/class>&#xa;               &lt;sql>employee_stage&lt;/sql>&#xa;               &lt;variables>&#xa;                   &lt;DATA_FILENAME value=&quot;{DATA_FOLDER}emp.dat&quot; />&#xa;                   &lt;DELIMETER value=&quot;;&quot; />&#xa;               &lt;/variables>&#xa;          &lt;/task>&#xa;          &#xa;          &#xa;     &lt;/tasks>&#xa;     &#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_table&lt;/name>&#xa;               &lt;metadata>true&lt;/metadata>&#xa;               &lt;cursor table=&quot;employee_stage&quot; onfinish=&quot;drop&quot; />&#xa;          &lt;/destination>&#xa;     &lt;/destinations>&#xa;&lt;/scenario>"
                    name="Informix Extract and Load using DbAccess" type="1"/>
                <node code="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?>&#xa;&lt;scenario>&#xa;     &lt;name>Informix merge, update, delete&lt;/name>&#xa;     &lt;description>Informix merge, update, delete&lt;/description>&#xa;     &lt;script>informix_merge_data&lt;/script>&#xa;     &lt;allow>EXTRACT_LOAD&lt;/allow>&#xa;     &lt;driver>com.toolsverse.etl.driver.informix.InformixDriver&lt;/driver>&#xa;     &lt;sources>&#xa;          &lt;source>&#xa;               &lt;name>employee&lt;/name>&#xa;               &lt;extract>&#xa;                    &lt;sql>select * from employee&lt;/sql>&#xa;               &lt;/extract>&#xa;          &lt;/source>&#xa;     &lt;/sources>&#xa;     &lt;destinations>&#xa;          &lt;destination>&#xa;               &lt;name>employee_upsert&lt;/name>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;metadata>yes&lt;/metadata>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>delete&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;delete&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX />&#xa;                   &lt;/variables>&#xa;                   &lt;condition>{SEX} = 'M'&lt;/condition>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>update&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;update&quot; key=&quot;EMPNO&quot;> &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;let {SEX} = 'U';&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;&#xa;          &lt;destination>&#xa;               &lt;name>merge&lt;/name>&#xa;               &lt;tablename>employee_upsert&lt;/tablename>&#xa;               &lt;source>employee&lt;/source>&#xa;               &lt;load action=&quot;merge&quot; key=&quot;EMPNO&quot; > &#xa;                   &lt;variables>&#xa;                       &lt;SEX sql=&quot;if {SEX} = 'M' then &#xa;                                     let {SEX} = 'I'; &#xa;                                 else &#xa;                                     let {SEX} = 'U'; &#xa;                                 end if;&quot; />&#xa;                   &lt;/variables>&#xa;               &lt;/load>&#xa;          &lt;/destination>   &#xa;          &#xa;          &#xa;     &lt;/destinations>&#xa;&lt;/scenario>" name="Informix merge, update, delete" type="1"/>
            </nodes>
        </node>
    </nodes>
</etl>
