/*
 * ComponentAdapter.java
 * 
 * Copyright 2010-2012 Toolsverse. All rights reserved. Toolsverse
 * PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.toolsverse.mvc.view;

import java.awt.event.ActionEvent;
import java.beans.PropertyChangeEvent;

/**
 * Component Adapter translates between the events generated by a particular component class and the Action and PropertyChange events used by the MVC
 * infrastructure.
 * 
 * Each Component class that participates in the Toolsverse MVC pattern must define an
 * adapter class. Adapters for standard UI components are implemented in the SwingComponentAdapter and WingsComponentAdapter
 * classes. Components will implement the ComponentAdapterProvider interface and define their own adapters.
 * 
 * @author Maksym Sherbinin
 * @version 2.0
 * @since 2.0
 */

public abstract class ComponentAdapter
{
    //
    // Component Adapter Behavior Masks
    //
    /** NO behavior modifications */
    public static final long NONE = 0;
    
    /** component value is not changing when model is changing */
    public static final long NOT_MUTABLE = 1;
    
    /** if set adapter will notify model when component's document has changed. Used by text components only. Not used by web text component. */
    public static final long HANDLE_DOCUMENT_CHANGE = 2;
    
    /** if set adapter will ignore focus change event. Used by text components only. Not used by web text component. */
    public static final long IGNORE_FOCUS_CHANGE = 4;
    
    /** if set the default action listeners for the button will be removed */
    public static final long READ_ACTION_LISTENERS = 8;
    
    /** if set the adapter will react on item selction events in lists and tables */
    public static final long HANDLE_ITEM_SELECTION = 16;
    
    /** The component. */
    private Object _component;
    
    /** The view. */
    private View _view;
    
    /** The value. */
    private Object _value;
    
    /** The behavior mask. */
    private long _behaviorMask;
    
    /**
     * Instantiates a new ComponentAdapter.
     */
    public ComponentAdapter()
    {
        _component = null;
        _view = null;
        _value = null;
        _behaviorMask = NONE;
    }
    
    /**
     * Instantiates a new ComponentAdapter.
     *
     * @param view the view
     * @param component the component
     */
    public ComponentAdapter(View view, Object component)
    {
        _component = component;
        _view = view;
        _value = null;
        _behaviorMask = NONE;
    }
    
    /**
     * Retuns a component value, such as field.getText() using convertForStorage(...).
     *
     * @return the component value
     */
    public Object access()
    {
        return convertForStorage(_value);
    }
    
    /**
     * Excuted when ActionEvent is fired by the component.
     */
    protected void actionOccured()
    {
        actionOccured(getName());
    }
    
    /**
     * Excuted when ActionEvent for the particular command is fired by the component.
     *
     * @param command the command
     */
    protected void actionOccured(String command)
    {
        if (_view != null)
        {
            _view.actionPerformed(new ActionEvent(_component,
                    ActionEvent.ACTION_PERFORMED, command));
        }
    }
    
    /**
     * Converts value for display. When model has changed it notifies view and view notifies component adapter. The actual value passed to the component
     * can be modified by convertForDisplay.
     *
     * @param input the input
     * @return the object
     */
    public Object convertForDisplay(Object input)
    {
        return ((_view != null && _view.getController() != null) ? _view
                .getController().convertForDisplay(getName(), input) : input);
    }
    
    /**
     * Convert value for storage. When component value has changed component adapter notifies view and view notifies model. The actual value passed to the model
     * can be modified by convertForStorage. 
     *
     * @param input the input
     * @return the object
     */
    public Object convertForStorage(Object input)
    {
        return ((_view != null && _view.getController() != null) ? _view
                .getController().convertForStorage(getName(), input) : input);
    }
    
    /**
     * Dettach from the view.
     */
    public void dettach()
    {
        _component = null;
        _view = null;
    }
    
    /**
     * Executed when model has changed.
     *
     * @param newValue the new value
     */
    public void display(Object newValue)
    {
    }
    
    /**
     * Gets the component.
     *
     * @return the component
     */
    public Object getComponent()
    {
        return _component;
    }
    
    /**
     * Gets the name.
     *
     * @return the name
     */
    public abstract String getName();
    
    /**
     * Gets the view.
     *
     * @return the view
     */
    public View getView()
    {
        return _view;
    }
    
    /**
     * Requests repaint for the component. 
     */
    public abstract void invalidate();
    
    /**
     * Checks if is the behavior modificator is set.
     *
     * @param value the behavior modificator
     * @return true, if behavior modificator is set
     */
    public boolean isBehaviorSet(long value)
    {
        return ((_behaviorMask & value) == value);
    }
    
    /**
     * Sets new value for the component.
     *
     * @param newValue the new value
     */
    public void populate(Object newValue)
    {
        _value = newValue;
        display(convertForDisplay(_value));
    }
    
    /**
     * Sets the behavior modification mask.
     *
     * @param value the new behavior modification mask
     */
    public void setBehaviorMask(long value)
    {
        _behaviorMask = _behaviorMask | value;
    }
    
    /**
     * Notifies view when component value has changed.
     *
     * @param newValue the new value
     */
    public void valueChanging(Object newValue)
    {
        Object store = convertForStorage(newValue);
        
        if (_view != null && !isBehaviorSet(NOT_MUTABLE))
        {
            _view.propertyChange(new PropertyChangeEvent(_component, getName(),
                    _value, store));
        }
        
        _value = store;
    }
}
